import {
  PERMISSIONS,
  getTrad
} from "./chunk-DJJSG3NG.js";
import "./chunk-RGCCJYO5.js";
import "./chunk-RNFOMM46.js";
import "./chunk-AK5CFNWL.js";
import "./chunk-YDQPAPQM.js";
import "./chunk-4STZVJXL.js";
import "./chunk-6ZLCDLDK.js";
import "./chunk-7CUGFTA6.js";
import "./chunk-RYDYFWK3.js";
import "./chunk-BLNSTUJL.js";
import "./chunk-HPECRBES.js";
import "./chunk-EBVWQ5LF.js";
import "./chunk-ZUMMFT2K.js";
import "./chunk-IDJQLPPL.js";
import "./chunk-SJRFDKZ7.js";
import "./chunk-BFQ6FEQZ.js";
import "./chunk-PDGPTUUZ.js";
import "./chunk-35VUZJRC.js";
import "./chunk-VDLFTLVW.js";
import "./chunk-H4GPAAVJ.js";
import "./chunk-BWFO5XQW.js";
import "./chunk-5V57HTKQ.js";
import "./chunk-KW6LQMN7.js";
import "./chunk-WYCOX5O3.js";
import "./chunk-OM2DHNO6.js";
import "./chunk-PC7CXYGN.js";
import "./chunk-QTDINVTV.js";
import "./chunk-HIZVCZYI.js";
import "./chunk-6LY4MOO2.js";
import "./chunk-CTJEZX42.js";
import "./chunk-53POI7IS.js";
import "./chunk-XNACAI67.js";
import "./chunk-QEQLI7DQ.js";
import {
  useMutation,
  useQuery,
  useQueryClient
} from "./chunk-ZBPTG6SW.js";
import "./chunk-VEVUEJ32.js";
import "./chunk-C7H2BX76.js";
import "./chunk-SYWYLB7I.js";
import "./chunk-PC3WAW7E.js";
import "./chunk-K3TVLHAL.js";
import "./chunk-6ASYCMUH.js";
import "./chunk-PK3ZFZKA.js";
import "./chunk-TSLJUNC3.js";
import "./chunk-IO3VP5IE.js";
import "./chunk-AHBVW64Z.js";
import "./chunk-QIJGNK42.js";
import "./chunk-K5YL2QBO.js";
import "./chunk-UXWTFPOA.js";
import "./chunk-XK24IEHQ.js";
import "./chunk-HDTECTWR.js";
import "./chunk-3BE3O3AO.js";
import "./chunk-S3YW2S6K.js";
import "./chunk-77H66RLC.js";
import {
  MemoizedInputRenderer
} from "./chunk-2CLYA3EW.js";
import {
  Form
} from "./chunk-ZKHXEW4O.js";
import "./chunk-3DRZIGZ7.js";
import "./chunk-AXWXT77Z.js";
import "./chunk-BERSGFTW.js";
import {
  useFetchClient
} from "./chunk-4RP25Z52.js";
import "./chunk-UXF74U5H.js";
import "./chunk-FA4S65BC.js";
import {
  useRBAC
} from "./chunk-QNNEQYNF.js";
import "./chunk-6B35QAMP.js";
import "./chunk-KZSSMEWY.js";
import "./chunk-MBK4V2X7.js";
import {
  require_isEmpty
} from "./chunk-YJEURQPS.js";
import "./chunk-IOVENIGM.js";
import "./chunk-JBETOYCV.js";
import "./chunk-K65KIEAL.js";
import "./chunk-GGK2TLCV.js";
import "./chunk-SBDL6J4T.js";
import "./chunk-6QBME3X6.js";
import "./chunk-57WDCADH.js";
import "./chunk-NZYVKQYR.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import {
  errorsTrads
} from "./chunk-IFOFBKTA.js";
import {
  create2 as create,
  create4 as create2,
  create6 as create3
} from "./chunk-XUB42PRF.js";
import "./chunk-EGNP2T5O.js";
import "./chunk-DFNLSM7R.js";
import {
  Layouts
} from "./chunk-J3VX4TLS.js";
import "./chunk-SWMKW6KW.js";
import "./chunk-EYPLXPYB.js";
import "./chunk-GMP26IAR.js";
import "./chunk-HYAPEEEA.js";
import "./chunk-YXDCVYVT.js";
import "./chunk-PQINNV4N.js";
import "./chunk-VYSYYPOB.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-E6226V6Q.js";
import "./chunk-HOFXRYRB.js";
import "./chunk-6CNXZWKV.js";
import {
  useNotification
} from "./chunk-DU5PMQGH.js";
import "./chunk-3P6TVZEI.js";
import "./chunk-MQTX2EPM.js";
import "./chunk-XIWU657M.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-HQK34MOW.js";
import "./chunk-ROXOEY4R.js";
import "./chunk-CE4VABH2.js";
import "./chunk-QOUV5O5E.js";
import {
  Box,
  Button,
  Flex,
  Grid,
  Typography,
  useNotifyAT
} from "./chunk-EA7PLESO.js";
import {
  useIntl
} from "./chunk-W7N7G5WV.js";
import "./chunk-5ZC4PE57.js";
import "./chunk-S65ZWNEO.js";
import "./chunk-FOD4ENRR.js";
import {
  ForwardRef$4N
} from "./chunk-VG5GJPFG.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import "./chunk-3CQBCJ3G.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/plugin-users-permissions/dist/admin/pages/AdvancedSettings/index.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var import_isEmpty2 = __toESM(require_isEmpty(), 1);

// node_modules/@strapi/plugin-users-permissions/dist/admin/pages/AdvancedSettings/utils/layout.mjs
var import_isEmpty = __toESM(require_isEmpty(), 1);
var layout = [
  {
    label: {
      id: getTrad("EditForm.inputToggle.label.email"),
      defaultMessage: "One account per email address"
    },
    hint: {
      id: getTrad("EditForm.inputToggle.description.email"),
      defaultMessage: "Disallow the user to create multiple accounts using the same email address with different authentication providers."
    },
    name: "unique_email",
    type: "boolean",
    size: 12
  },
  {
    label: {
      id: getTrad("EditForm.inputToggle.label.sign-up"),
      defaultMessage: "Enable sign-ups"
    },
    hint: {
      id: getTrad("EditForm.inputToggle.description.sign-up"),
      defaultMessage: "When disabled (OFF), the registration process is forbidden. No one can subscribe anymore no matter the used provider."
    },
    name: "allow_register",
    type: "boolean",
    size: 12
  },
  {
    label: {
      id: getTrad("EditForm.inputToggle.label.email-reset-password"),
      defaultMessage: "Reset password page"
    },
    hint: {
      id: getTrad("EditForm.inputToggle.description.email-reset-password"),
      defaultMessage: "URL of your application's reset password page."
    },
    placeholder: {
      id: getTrad("EditForm.inputToggle.placeholder.email-reset-password"),
      defaultMessage: "ex: https://youtfrontend.com/reset-password"
    },
    name: "email_reset_password",
    type: "string",
    size: 12
  },
  {
    label: {
      id: getTrad("EditForm.inputToggle.label.email-confirmation"),
      defaultMessage: "Enable email confirmation"
    },
    hint: {
      id: getTrad("EditForm.inputToggle.description.email-confirmation"),
      defaultMessage: "When enabled (ON), new registered users receive a confirmation email."
    },
    name: "email_confirmation",
    type: "boolean",
    size: 12
  },
  {
    label: {
      id: getTrad("EditForm.inputToggle.label.email-confirmation-redirection"),
      defaultMessage: "Redirection url"
    },
    hint: {
      id: getTrad("EditForm.inputToggle.description.email-confirmation-redirection"),
      defaultMessage: "After you confirmed your email, choose where you will be redirected."
    },
    placeholder: {
      id: getTrad("EditForm.inputToggle.placeholder.email-confirmation-redirection"),
      defaultMessage: "ex: https://youtfrontend.com/email-confirmation"
    },
    name: "email_confirmation_redirection",
    type: "string",
    size: 12
  }
];

// node_modules/@strapi/plugin-users-permissions/dist/admin/pages/AdvancedSettings/utils/schema.mjs
var URL_REGEX = new RegExp("(^$)|((.+:\\/\\/.*)(d*)\\/?(.*))");
var schema = create3().shape({
  email_confirmation_redirection: create().when("email_confirmation", {
    is: true,
    then: create2().matches(URL_REGEX).required(),
    otherwise: create2().nullable()
  }),
  email_reset_password: create2(errorsTrads.string).matches(URL_REGEX, {
    id: errorsTrads.regex.id,
    defaultMessage: "This is not a valid URL"
  }).nullable()
});

// node_modules/@strapi/plugin-users-permissions/dist/admin/pages/AdvancedSettings/index.mjs
var ProtectedAdvancedSettingsPage = () => (0, import_jsx_runtime.jsx)(Page.Protect, {
  permissions: PERMISSIONS.readAdvancedSettings,
  children: (0, import_jsx_runtime.jsx)(AdvancedSettingsPage, {})
});
var AdvancedSettingsPage = () => {
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { notifyStatus } = useNotifyAT();
  const queryClient = useQueryClient();
  const { get, put } = useFetchClient();
  const { formatAPIError } = useAPIErrorHandler();
  const { isLoading: isLoadingForPermissions, allowedActions: { canUpdate } } = useRBAC({
    update: PERMISSIONS.updateAdvancedSettings
  });
  const { isLoading: isLoadingData, data } = useQuery([
    "users-permissions",
    "advanced"
  ], async () => {
    const { data: data2 } = await get("/users-permissions/advanced");
    return data2;
  }, {
    onSuccess() {
      notifyStatus(formatMessage({
        id: getTrad("Form.advancedSettings.data.loaded"),
        defaultMessage: "Advanced settings data has been loaded"
      }));
    },
    onError() {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: getTrad("notification.error"),
          defaultMessage: "An error occured"
        })
      });
    }
  });
  const isLoading = isLoadingForPermissions || isLoadingData;
  const submitMutation = useMutation((body) => put("/users-permissions/advanced", body), {
    async onSuccess() {
      await queryClient.invalidateQueries([
        "users-permissions",
        "advanced"
      ]);
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: getTrad("notification.success.saved"),
          defaultMessage: "Saved"
        })
      });
    },
    onError(error) {
      toggleNotification({
        type: "danger",
        message: formatAPIError(error)
      });
    },
    refetchActive: true
  });
  const { isLoading: isSubmittingForm } = submitMutation;
  const handleSubmit = async (body) => {
    submitMutation.mutate({
      ...body,
      email_confirmation_redirection: body.email_confirmation ? body.email_confirmation_redirection : ""
    });
  };
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  return (0, import_jsx_runtime.jsxs)(Page.Main, {
    "aria-busy": isSubmittingForm,
    children: [
      (0, import_jsx_runtime.jsx)(Page.Title, {
        children: formatMessage({
          id: "Settings.PageTitle",
          defaultMessage: "Settings - {name}"
        }, {
          name: formatMessage({
            id: getTrad("HeaderNav.link.advancedSettings"),
            defaultMessage: "Advanced Settings"
          })
        })
      }),
      (0, import_jsx_runtime.jsx)(Form, {
        onSubmit: handleSubmit,
        initialValues: data.settings,
        validationSchema: schema,
        children: ({ values, isSubmitting, modified }) => {
          return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
            children: [
              (0, import_jsx_runtime.jsx)(Layouts.Header, {
                title: formatMessage({
                  id: getTrad("HeaderNav.link.advancedSettings"),
                  defaultMessage: "Advanced Settings"
                }),
                primaryAction: (0, import_jsx_runtime.jsx)(Button, {
                  loading: isSubmitting,
                  type: "submit",
                  disabled: !modified || !canUpdate,
                  startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$4N, {}),
                  size: "S",
                  children: formatMessage({
                    id: "global.save",
                    defaultMessage: "Save"
                  })
                })
              }),
              (0, import_jsx_runtime.jsx)(Layouts.Content, {
                children: (0, import_jsx_runtime.jsx)(Box, {
                  background: "neutral0",
                  hasRadius: true,
                  shadow: "filterShadow",
                  paddingTop: 6,
                  paddingBottom: 6,
                  paddingLeft: 7,
                  paddingRight: 7,
                  children: (0, import_jsx_runtime.jsxs)(Flex, {
                    direction: "column",
                    alignItems: "stretch",
                    gap: 4,
                    children: [
                      (0, import_jsx_runtime.jsx)(Typography, {
                        variant: "delta",
                        tag: "h2",
                        children: formatMessage({
                          id: "global.settings",
                          defaultMessage: "Settings"
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Grid.Root, {
                        gap: 6,
                        children: [
                          {
                            label: {
                              id: getTrad("EditForm.inputSelect.label.role"),
                              defaultMessage: "Default role for authenticated users"
                            },
                            hint: {
                              id: getTrad("EditForm.inputSelect.description.role"),
                              defaultMessage: "It will attach the new authenticated user to the selected role."
                            },
                            options: data.roles.map((role) => ({
                              label: role.name,
                              value: role.type
                            })),
                            name: "default_role",
                            size: 6,
                            type: "enumeration"
                          },
                          ...layout
                        ].map(({ size, ...field }) => (0, import_jsx_runtime.jsx)(Grid.Item, {
                          col: size,
                          direction: "column",
                          alignItems: "stretch",
                          children: (0, import_jsx_runtime.jsx)(MemoizedInputRenderer, {
                            ...field,
                            disabled: field.name === "email_confirmation_redirection" && values.email_confirmation === false,
                            label: formatMessage(field.label),
                            hint: field.hint ? formatMessage(field.hint) : void 0,
                            placeholder: field.placeholder ? formatMessage(field.placeholder) : void 0
                          })
                        }, field.name))
                      })
                    ]
                  })
                })
              })
            ]
          });
        }
      })
    ]
  });
};
export {
  AdvancedSettingsPage,
  ProtectedAdvancedSettingsPage
};
//# sourceMappingURL=AdvancedSettings-L4KHIEXU.js.map
