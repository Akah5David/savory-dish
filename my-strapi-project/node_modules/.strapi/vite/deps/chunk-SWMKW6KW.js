import {
  axios_default
} from "./chunk-EYPLXPYB.js";
import {
  useInitQuery,
  useTelemetryPropertiesQuery
} from "./chunk-GMP26IAR.js";
import {
  useAuth,
  useStrapiApp
} from "./chunk-HOFXRYRB.js";
import {
  createContext
} from "./chunk-HQK34MOW.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/admin/dist/admin/admin/src/features/AppInfo.mjs
var [AppInfoProvider, useAppInfo] = createContext("AppInfo", {});

// node_modules/@strapi/admin/dist/admin/admin/src/features/Tracking.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var TrackingContext = React.createContext({
  uuid: false
});
var TrackingProvider = ({ children }) => {
  const token = useAuth("App", (state) => state.token);
  const { data: initData } = useInitQuery();
  const { uuid } = initData ?? {};
  const getAllWidgets = useStrapiApp("TrackingProvider", (state) => state.widgets.getAll);
  const { data } = useTelemetryPropertiesQuery(void 0, {
    skip: !(initData == null ? void 0 : initData.uuid) || !token
  });
  React.useEffect(() => {
    if (uuid && data) {
      const event = "didInitializeAdministration";
      try {
        fetch(`${process.env.STRAPI_ANALYTICS_URL || "https://analytics.strapi.io"}/api/v2/track`, {
          method: "POST",
          body: JSON.stringify({
            // This event is anonymous
            event,
            userId: "",
            eventPropeties: {},
            groupProperties: {
              ...data,
              projectId: uuid,
              registeredWidgets: getAllWidgets().map((widget) => widget.uid)
            }
          }),
          headers: {
            "Content-Type": "application/json",
            "X-Strapi-Event": event
          }
        });
      } catch {
      }
    }
  }, [
    data,
    uuid,
    getAllWidgets
  ]);
  const value = React.useMemo(() => ({
    uuid,
    telemetryProperties: data
  }), [
    uuid,
    data
  ]);
  return (0, import_jsx_runtime.jsx)(TrackingContext.Provider, {
    value,
    children
  });
};
var useTracking = () => {
  const { uuid, telemetryProperties } = React.useContext(TrackingContext);
  const userId = useAppInfo("useTracking", (state) => state.userId);
  const trackUsage = React.useCallback(async (event, properties) => {
    try {
      if (uuid && !window.strapi.telemetryDisabled) {
        const res = await axios_default.post(`${process.env.STRAPI_ANALYTICS_URL || "https://analytics.strapi.io"}/api/v2/track`, {
          event,
          userId,
          eventProperties: {
            ...properties
          },
          userProperties: {},
          groupProperties: {
            ...telemetryProperties,
            projectId: uuid,
            projectType: window.strapi.projectType
          }
        }, {
          headers: {
            "Content-Type": "application/json",
            "X-Strapi-Event": event
          }
        });
        return res;
      }
    } catch (err) {
    }
    return null;
  }, [
    telemetryProperties,
    userId,
    uuid
  ]);
  return {
    trackUsage
  };
};

export {
  AppInfoProvider,
  useAppInfo,
  TrackingProvider,
  useTracking
};
//# sourceMappingURL=chunk-SWMKW6KW.js.map
