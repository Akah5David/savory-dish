{
  "version": 3,
  "sources": ["../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/hooks/useDebounce.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/pages/Marketplace/components/NpmPackagesFilters.tsx", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/pages/Marketplace/components/NpmPackageCard.tsx", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/pages/Marketplace/components/NpmPackagesGrid.tsx", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/pages/Marketplace/components/PageHeader.tsx", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/pages/Marketplace/components/OfflineLayout.tsx", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/pages/Marketplace/components/SortSelect.tsx", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/pages/Marketplace/hooks/useMarketplaceData.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/pages/Marketplace/hooks/useNavigatorOnline.ts", "../../../@strapi/plugin-documentation/node_modules/@strapi/admin/admin/src/pages/Marketplace/MarketplacePage.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nexport function useDebounce<TValue>(value: TValue, delay: number): TValue {\n  const [debouncedValue, setDebouncedValue] = React.useState(value);\n\n  React.useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n", "import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  Tag,\n  MultiSelect,\n  MultiSelectOption,\n  MultiSelectProps,\n  Popover,\n  Flex,\n} from '@strapi/design-system';\nimport { Cross, Filter } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport type { Categories, Collections, FilterTypes } from '../hooks/useMarketplaceData';\nimport type { NpmPackageType, MarketplacePageQuery } from '../MarketplacePage';\n\ninterface NpmPackagesFiltersProps {\n  handleSelectClear: (type: FilterTypes) => void;\n  handleSelectChange: (update: Partial<MarketplacePageQuery>) => void;\n  npmPackageType: NpmPackageType;\n  possibleCategories: Partial<Record<Categories, number>>;\n  possibleCollections: Partial<Record<Collections, number>>;\n  query: MarketplacePageQuery;\n}\n\nconst NpmPackagesFilters = ({\n  handleSelectClear,\n  handleSelectChange,\n  npmPackageType,\n  possibleCategories,\n  possibleCollections,\n  query,\n}: NpmPackagesFiltersProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleTagRemove = (tagToRemove: string, filterType: FilterTypes) => {\n    const update = {\n      [filterType]: (query[filterType] ?? []).filter((previousTag) => previousTag !== tagToRemove),\n    };\n\n    handleSelectChange(update);\n  };\n\n  return (\n    <Popover.Root>\n      <Popover.Trigger>\n        <Button variant=\"tertiary\" startIcon={<Filter />}>\n          {formatMessage({ id: 'app.utils.filters', defaultMessage: 'Filters' })}\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content sideOffset={4}>\n        <Flex padding={3} direction=\"column\" alignItems=\"stretch\" gap={1}>\n          <FilterSelect\n            message={formatMessage({\n              id: 'admin.pages.MarketPlacePage.filters.collections',\n              defaultMessage: 'Collections',\n            })}\n            value={query?.collections || []}\n            onChange={(newCollections) => {\n              const update = { collections: newCollections };\n              handleSelectChange(update);\n            }}\n            onClear={() => handleSelectClear('collections')}\n            possibleFilters={possibleCollections}\n            customizeContent={(values) =>\n              formatMessage(\n                {\n                  id: 'admin.pages.MarketPlacePage.filters.collectionsSelected',\n                  defaultMessage:\n                    '{count, plural, =0 {No collections} one {# collection} other {# collections}} selected',\n                },\n                { count: values?.length ?? 0 }\n              )\n            }\n          />\n          {npmPackageType === 'plugin' && (\n            <FilterSelect\n              message={formatMessage({\n                id: 'admin.pages.MarketPlacePage.filters.categories',\n                defaultMessage: 'Categories',\n              })}\n              value={query?.categories || []}\n              onChange={(newCategories) => {\n                const update = { categories: newCategories };\n                handleSelectChange(update);\n              }}\n              onClear={() => handleSelectClear('categories')}\n              possibleFilters={possibleCategories}\n              customizeContent={(values) =>\n                formatMessage(\n                  {\n                    id: 'admin.pages.MarketPlacePage.filters.categoriesSelected',\n                    defaultMessage:\n                      '{count, plural, =0 {No categories} one {# category} other {# categories}} selected',\n                  },\n                  { count: values?.length ?? 0 }\n                )\n              }\n            />\n          )}\n        </Flex>\n      </Popover.Content>\n\n      {query.collections?.map((collection) => (\n        <Box key={collection} padding={1}>\n          <Tag icon={<Cross />} onClick={() => handleTagRemove(collection, 'collections')}>\n            {collection}\n          </Tag>\n        </Box>\n      ))}\n      {npmPackageType === 'plugin' &&\n        query.categories?.map((category) => (\n          <Box key={category} padding={1}>\n            <Tag icon={<Cross />} onClick={() => handleTagRemove(category, 'categories')}>\n              {category}\n            </Tag>\n          </Box>\n        ))}\n    </Popover.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * FilterSelect\n * -----------------------------------------------------------------------------------------------*/\n\ninterface FilterSelectProps\n  extends Pick<MultiSelectProps, 'customizeContent' | 'onClear' | 'onChange' | 'value'> {\n  message: string;\n  possibleFilters:\n    | NpmPackagesFiltersProps['possibleCategories']\n    | NpmPackagesFiltersProps['possibleCollections'];\n}\n\nconst FilterSelect = ({\n  message,\n  value,\n  onChange,\n  possibleFilters,\n  onClear,\n  customizeContent,\n}: FilterSelectProps) => {\n  return (\n    <MultiSelect\n      data-testid={`${message}-button`}\n      aria-label={message}\n      placeholder={message}\n      onChange={onChange}\n      onClear={onClear}\n      value={value}\n      customizeContent={customizeContent}\n    >\n      {Object.entries(possibleFilters).map(([filterName, count]) => {\n        return (\n          <MultiSelectOption\n            data-testid={`${filterName}-${count}`}\n            key={filterName}\n            value={filterName}\n          >\n            {`${filterName} (${count})`}\n          </MultiSelectOption>\n        );\n      })}\n    </MultiSelect>\n  );\n};\n\nexport { NpmPackagesFilters };\nexport type { NpmPackagesFiltersProps };\n", "import {\n  Box,\n  Flex,\n  Tooltip,\n  Typography,\n  Divider,\n  Button,\n  LinkButton,\n  TypographyComponent,\n} from '@strapi/design-system';\nimport { CheckCircle, ExternalLink, Download, Star, Check, Duplicate } from '@strapi/icons';\nimport { GitHub } from '@strapi/icons/symbols';\nimport pluralize from 'pluralize';\nimport { useIntl } from 'react-intl';\nimport * as semver from 'semver';\nimport { styled } from 'styled-components';\n\nimport StrapiLogo from '../../../assets/images/logo-strapi-2022.svg';\nimport { AppInfoContextValue } from '../../../features/AppInfo';\nimport { useNotification } from '../../../features/Notifications';\nimport { useTracking } from '../../../features/Tracking';\nimport { useClipboard } from '../../../hooks/useClipboard';\n\nimport type { Plugin, Provider } from '../hooks/useMarketplaceData';\nimport type { NpmPackageType } from '../MarketplacePage';\n\n// Custom component to have an ellipsis after the 2nd line\nconst EllipsisText = styled<TypographyComponent<'p'>>(Typography)`\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 2;\n  overflow: hidden;\n`;\n\ninterface NpmPackageCardProps extends Pick<AppInfoContextValue, 'useYarn'> {\n  npmPackage: Plugin | Provider;\n  isInstalled: boolean;\n  isInDevelopmentMode: AppInfoContextValue['autoReload'];\n  npmPackageType: NpmPackageType;\n  strapiAppVersion: AppInfoContextValue['strapiVersion'];\n}\n\nconst NpmPackageCard = ({\n  npmPackage,\n  isInstalled,\n  useYarn,\n  isInDevelopmentMode,\n  npmPackageType,\n  strapiAppVersion,\n}: NpmPackageCardProps) => {\n  const { attributes } = npmPackage;\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n\n  const commandToCopy = useYarn\n    ? `yarn add ${attributes.npmPackageName}`\n    : `npm install ${attributes.npmPackageName}`;\n\n  const madeByStrapiMessage = formatMessage({\n    id: 'admin.pages.MarketPlacePage.plugin.tooltip.madeByStrapi',\n    defaultMessage: 'Made by Strapi',\n  });\n\n  const npmPackageHref = `https://market.strapi.io/${pluralize.plural(npmPackageType)}/${\n    attributes.slug\n  }`;\n\n  const versionRange = semver.validRange(attributes.strapiVersion);\n\n  const isCompatible = versionRange\n    ? semver.satisfies(strapiAppVersion ?? '', versionRange)\n    : false;\n\n  return (\n    <Flex\n      direction=\"column\"\n      justifyContent=\"space-between\"\n      paddingTop={4}\n      paddingRight={4}\n      paddingBottom={4}\n      paddingLeft={4}\n      hasRadius\n      background=\"neutral0\"\n      shadow=\"tableShadow\"\n      height=\"100%\"\n      alignItems=\"normal\"\n      data-testid=\"npm-package-card\"\n    >\n      <Box>\n        <Flex direction=\"row\" justifyContent=\"space-between\" alignItems=\"flex-start\">\n          <Box\n            tag=\"img\"\n            src={attributes.logo.url}\n            alt={`${attributes.name} logo`}\n            hasRadius\n            width={11}\n            height={11}\n          />\n          <PackageStats\n            githubStars={attributes.githubStars}\n            npmDownloads={attributes.npmDownloads}\n            npmPackageType={npmPackageType}\n          />\n        </Flex>\n        <Box paddingTop={4}>\n          <Typography tag=\"h3\" variant=\"delta\">\n            <Flex\n              alignItems=\"center\"\n              gap={attributes.validated && !attributes.madeByStrapi ? 2 : 1}\n            >\n              {attributes.name}\n              {attributes.validated && !attributes.madeByStrapi && (\n                <Tooltip\n                  description={formatMessage({\n                    id: 'admin.pages.MarketPlacePage.plugin.tooltip.verified',\n                    defaultMessage: 'Plugin verified by Strapi',\n                  })}\n                >\n                  <CheckCircle fill=\"success600\" />\n                </Tooltip>\n              )}\n              {attributes.madeByStrapi && (\n                <Tooltip description={madeByStrapiMessage}>\n                  <Box\n                    tag=\"img\"\n                    src={StrapiLogo}\n                    alt={madeByStrapiMessage}\n                    width={6}\n                    height=\"auto\"\n                  />\n                </Tooltip>\n              )}\n            </Flex>\n          </Typography>\n        </Box>\n        <Box paddingTop={2}>\n          <EllipsisText tag=\"p\" variant=\"omega\" textColor=\"neutral600\">\n            {attributes.description}\n          </EllipsisText>\n        </Box>\n      </Box>\n\n      <Flex gap={2} style={{ alignSelf: 'flex-end' }} paddingTop={6}>\n        <LinkButton\n          size=\"S\"\n          href={npmPackageHref}\n          isExternal\n          endIcon={<ExternalLink />}\n          aria-label={formatMessage(\n            {\n              id: 'admin.pages.MarketPlacePage.plugin.info.label',\n              defaultMessage: 'Learn more about {pluginName}',\n            },\n            { pluginName: attributes.name }\n          )}\n          variant=\"tertiary\"\n          onClick={() => trackUsage('didPluginLearnMore')}\n        >\n          {formatMessage({\n            id: 'admin.pages.MarketPlacePage.plugin.info.text',\n            defaultMessage: 'More',\n          })}\n        </LinkButton>\n        <InstallPluginButton\n          isInstalled={isInstalled}\n          isInDevelopmentMode={isInDevelopmentMode}\n          isCompatible={isCompatible}\n          commandToCopy={commandToCopy}\n          strapiAppVersion={strapiAppVersion}\n          strapiPeerDepVersion={attributes.strapiVersion}\n          pluginName={attributes.name}\n        />\n      </Flex>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * InstallPluginButton\n * -----------------------------------------------------------------------------------------------*/\n\ninterface InstallPluginButtonProps\n  extends Pick<NpmPackageCardProps, 'isInstalled' | 'isInDevelopmentMode' | 'strapiAppVersion'> {\n  commandToCopy: string;\n  pluginName: string;\n  strapiPeerDepVersion?: string;\n  isCompatible?: boolean;\n}\n\nconst InstallPluginButton = ({\n  isInstalled,\n  isInDevelopmentMode,\n  isCompatible,\n  commandToCopy,\n  strapiAppVersion,\n  strapiPeerDepVersion,\n  pluginName,\n}: InstallPluginButtonProps) => {\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { copy } = useClipboard();\n\n  const handleCopy = async () => {\n    const didCopy = await copy(commandToCopy);\n\n    if (didCopy) {\n      trackUsage('willInstallPlugin');\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({ id: 'admin.pages.MarketPlacePage.plugin.copy.success' }),\n      });\n    }\n  };\n\n  // Already installed\n  if (isInstalled) {\n    return (\n      <Flex gap={2} paddingLeft={4}>\n        <Check width=\"1.2rem\" height=\"1.2rem\" color=\"success600\" />\n        <Typography variant=\"omega\" textColor=\"success600\" fontWeight=\"bold\">\n          {formatMessage({\n            id: 'admin.pages.MarketPlacePage.plugin.installed',\n            defaultMessage: 'Installed',\n          })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  // In development, show install button\n  if (isInDevelopmentMode && isCompatible !== false) {\n    return (\n      <CardButton\n        strapiAppVersion={strapiAppVersion}\n        strapiPeerDepVersion={strapiPeerDepVersion}\n        handleCopy={handleCopy}\n        pluginName={pluginName}\n      />\n    );\n  }\n\n  // Not in development and plugin not installed already. Show nothing\n  return null;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * CardButton\n * -----------------------------------------------------------------------------------------------*/\n\ninterface CardButtonProps\n  extends Pick<NpmPackageCardProps, 'strapiAppVersion'>,\n    Pick<InstallPluginButtonProps, 'strapiPeerDepVersion' | 'pluginName'> {\n  handleCopy: () => void;\n}\n\nconst CardButton = ({\n  strapiPeerDepVersion,\n  strapiAppVersion,\n  handleCopy,\n  pluginName,\n}: CardButtonProps) => {\n  const { formatMessage } = useIntl();\n  const versionRange = semver.validRange(strapiPeerDepVersion);\n  const isCompatible = semver.satisfies(strapiAppVersion ?? '', versionRange ?? '');\n\n  const installMessage = formatMessage({\n    id: 'admin.pages.MarketPlacePage.plugin.copy',\n    defaultMessage: 'Copy install command',\n  });\n\n  // Only plugins receive a strapiAppVersion\n  if (strapiAppVersion) {\n    if (!versionRange || !isCompatible) {\n      return (\n        <Tooltip\n          data-testid={`tooltip-${pluginName}`}\n          label={formatMessage(\n            {\n              id: 'admin.pages.MarketPlacePage.plugin.version',\n              defaultMessage:\n                'Update your Strapi version: \"{strapiAppVersion}\" to: \"{versionRange}\"',\n            },\n            {\n              strapiAppVersion,\n              versionRange,\n            }\n          )}\n        >\n          <span>\n            <Button\n              size=\"S\"\n              startIcon={<Duplicate />}\n              variant=\"secondary\"\n              onClick={handleCopy}\n              disabled={!isCompatible}\n            >\n              {installMessage}\n            </Button>\n          </span>\n        </Tooltip>\n      );\n    }\n  }\n\n  return (\n    <Button size=\"S\" startIcon={<Duplicate />} variant=\"secondary\" onClick={handleCopy}>\n      {installMessage}\n    </Button>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PackageStats\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PackageStatsProps {\n  githubStars?: number;\n  npmDownloads?: number;\n  npmPackageType: NpmPackageType;\n}\n\nconst PackageStats = ({ githubStars = 0, npmDownloads = 0, npmPackageType }: PackageStatsProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex gap={1}>\n      {!!githubStars && (\n        <>\n          <GitHub height=\"1.2rem\" width=\"1.2rem\" aria-hidden />\n          <Star height=\"1.2rem\" width=\"1.2rem\" fill=\"warning500\" aria-hidden />\n          <p\n            aria-label={formatMessage(\n              {\n                id: `admin.pages.MarketPlacePage.${npmPackageType}.githubStars`,\n                defaultMessage: `This {package} was starred {starsCount} on GitHub`,\n              },\n              {\n                starsCount: githubStars,\n                package: npmPackageType,\n              }\n            )}\n          >\n            <Typography variant=\"pi\" textColor=\"neutral800\">\n              {githubStars}\n            </Typography>\n          </p>\n          <VerticalDivider />\n        </>\n      )}\n      <Download height=\"1.2rem\" width=\"1.2rem\" aria-hidden />\n      <p\n        aria-label={formatMessage(\n          {\n            id: `admin.pages.MarketPlacePage.${npmPackageType}.downloads`,\n            defaultMessage: `This {package} has {downloadsCount} weekly downloads`,\n          },\n          {\n            downloadsCount: npmDownloads,\n            package: npmPackageType,\n          }\n        )}\n      >\n        <Typography variant=\"pi\" textColor=\"neutral800\">\n          {npmDownloads}\n        </Typography>\n      </p>\n    </Flex>\n  );\n};\n\nconst VerticalDivider = styled(Divider)`\n  width: 1.2rem;\n  transform: rotate(90deg);\n`;\n\nexport { NpmPackageCard };\nexport type { NpmPackageCardProps };\n", "import { Box, BoxComponent, Flex, Grid, Typography } from '@strapi/design-system';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { Layouts } from '../../../components/Layouts/Layout';\nimport { Page } from '../../../components/PageHelpers';\nimport { AppInfoContextValue } from '../../../features/AppInfo';\n\nimport { NpmPackageCard, NpmPackageCardProps } from './NpmPackageCard';\n\nimport type { Plugin, Provider } from '../hooks/useMarketplaceData';\n\ninterface NpmPackagesGridProps extends Pick<NpmPackageCardProps, 'npmPackageType' | 'useYarn'> {\n  debouncedSearch: string;\n  installedPackageNames: string[];\n  isInDevelopmentMode: AppInfoContextValue['autoReload'];\n  npmPackages?: Array<Plugin | Provider>;\n  status: 'idle' | 'loading' | 'error' | 'success';\n  strapiAppVersion?: NpmPackageCardProps['strapiAppVersion'];\n}\n\nconst NpmPackagesGrid = ({\n  status,\n  npmPackages = [],\n  installedPackageNames = [],\n  useYarn,\n  isInDevelopmentMode,\n  npmPackageType,\n  strapiAppVersion,\n  debouncedSearch,\n}: NpmPackagesGridProps) => {\n  const { formatMessage } = useIntl();\n\n  if (status === 'error') {\n    return <Page.Error />;\n  }\n\n  if (status === 'loading') {\n    return <Page.Loading />;\n  }\n\n  const emptySearchMessage = formatMessage(\n    {\n      id: 'admin.pages.MarketPlacePage.search.empty',\n      defaultMessage: 'No result for \"{target}\"',\n    },\n    { target: debouncedSearch }\n  );\n\n  if (npmPackages.length === 0) {\n    return (\n      <Box position=\"relative\">\n        <Layouts.Grid size=\"M\">\n          {Array(12)\n            .fill(null)\n            .map((_, idx) => (\n              <EmptyPluginCard key={idx} height=\"234px\" hasRadius />\n            ))}\n        </Layouts.Grid>\n        <Box position=\"absolute\" top={11} width=\"100%\">\n          <Flex alignItems=\"center\" justifyContent=\"center\" direction=\"column\">\n            <EmptyDocuments width=\"160px\" height=\"88px\" />\n            <Box paddingTop={6}>\n              <Typography variant=\"delta\" tag=\"p\" textColor=\"neutral600\">\n                {emptySearchMessage}\n              </Typography>\n            </Box>\n          </Flex>\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <Grid.Root gap={4}>\n      {npmPackages.map((npmPackage) => (\n        <Grid.Item\n          col={4}\n          s={6}\n          xs={12}\n          style={{ height: '100%' }}\n          key={npmPackage.id}\n          direction=\"column\"\n          alignItems=\"stretch\"\n        >\n          <NpmPackageCard\n            npmPackage={npmPackage}\n            isInstalled={installedPackageNames.includes(npmPackage.attributes.npmPackageName)}\n            useYarn={useYarn}\n            isInDevelopmentMode={isInDevelopmentMode}\n            npmPackageType={npmPackageType}\n            strapiAppVersion={strapiAppVersion}\n          />\n        </Grid.Item>\n      ))}\n    </Grid.Root>\n  );\n};\n\nconst EmptyPluginCard = styled<BoxComponent>(Box)`\n  background: ${({ theme }) =>\n    `linear-gradient(180deg, rgba(234, 234, 239, 0) 0%, ${theme.colors.neutral150} 100%)`};\n  opacity: 0.33;\n`;\n\nexport { NpmPackagesGrid };\n", "import { LinkButton } from '@strapi/design-system';\nimport { Upload } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { Layouts } from '../../../components/Layouts/Layout';\nimport { useTracking } from '../../../features/Tracking';\n\nimport type { NpmPackageType } from '../MarketplacePage';\n\ninterface PageHeaderProps {\n  isOnline?: boolean;\n  npmPackageType?: NpmPackageType;\n}\n\nconst PageHeader = ({ isOnline, npmPackageType = 'plugin' }: PageHeaderProps) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n\n  const tracking = npmPackageType === 'provider' ? 'didSubmitProvider' : 'didSubmitPlugin';\n\n  return (\n    <Layouts.Header\n      title={formatMessage({\n        id: 'global.marketplace',\n        defaultMessage: 'Marketplace',\n      })}\n      subtitle={formatMessage({\n        id: 'admin.pages.MarketPlacePage.subtitle',\n        defaultMessage: 'Get more out of Strapi',\n      })}\n      primaryAction={\n        isOnline && (\n          <LinkButton\n            startIcon={<Upload />}\n            variant=\"tertiary\"\n            href={`https://market.strapi.io/submit-${npmPackageType}`}\n            onClick={() => trackUsage(tracking)}\n            isExternal\n          >\n            {formatMessage({\n              id: `admin.pages.MarketPlacePage.submit.${npmPackageType}.link`,\n              defaultMessage: `Submit ${npmPackageType}`,\n            })}\n          </LinkButton>\n        )\n      }\n    />\n  );\n};\n\nexport { PageHeader };\nexport type { PageHeaderProps };\n", "import { Box, Flex, Main, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { Layouts } from '../../../components/Layouts/Layout';\n\nimport { PageHeader } from './PageHeader';\n\nconst OfflineLayout = () => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Layouts.Root>\n      <Main>\n        <PageHeader />\n        <Flex\n          width=\"100%\"\n          direction=\"column\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          paddingTop={`12rem`}\n        >\n          <Box paddingBottom={2}>\n            <Typography textColor=\"neutral700\" variant=\"alpha\">\n              {formatMessage({\n                id: 'admin.pages.MarketPlacePage.offline.title',\n                defaultMessage: 'You are offline',\n              })}\n            </Typography>\n          </Box>\n          <Box paddingBottom={6}>\n            <Typography textColor=\"neutral700\" variant=\"epsilon\">\n              {formatMessage({\n                id: 'admin.pages.MarketPlacePage.offline.subtitle',\n                defaultMessage: 'You need to be connected to the Internet to access Strapi Market.',\n              })}\n            </Typography>\n          </Box>\n          <svg\n            width=\"88\"\n            height=\"88\"\n            viewBox=\"0 0 88 88\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <rect x=\".5\" y=\".5\" width=\"87\" height=\"87\" rx=\"43.5\" fill=\"#F0F0FF\" />\n            <path\n              d=\"M34 39.3h-4c-2.6 0-4.7 1-6.6 2.8a9 9 0 0 0-2.7 6.6 9 9 0 0 0 2.7 6.6A9 9 0 0 0 30 58h22.8L34 39.3Zm-11-11 3-3 39 39-3 3-4.7-4.6H30a13.8 13.8 0 0 1-14-14c0-3.8 1.3-7 4-9.7 2.6-2.7 5.7-4.2 9.5-4.3L23 28.2Zm38.2 11.1c3 .2 5.5 1.5 7.6 3.7A11 11 0 0 1 72 51c0 4-1.6 7.2-5 9.5l-3.3-3.4a6.5 6.5 0 0 0 3.6-6.1c0-1.9-.7-3.5-2-5-1.5-1.3-3.1-2-5-2h-3.5v-1.2c0-3.6-1.2-6.6-3.7-9a13 13 0 0 0-15-2.3L34.6 28a17 17 0 0 1 20.3 1.5c3.5 2.7 5.5 6 6.3 10Z\"\n              fill=\"#4945FF\"\n            />\n            <rect x=\".5\" y=\".5\" width=\"87\" height=\"87\" rx=\"43.5\" stroke=\"#D9D8FF\" />\n          </svg>\n        </Flex>\n      </Main>\n    </Layouts.Root>\n  );\n};\n\nexport { OfflineLayout };\n", "import { Box, SingleSelectOption, SingleSelect, BoxComponent } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nconst SORT_TYPES = {\n  'name:asc': {\n    selected: {\n      id: 'admin.pages.MarketPlacePage.sort.alphabetical.selected',\n      defaultMessage: 'Sort by alphabetical order',\n    },\n    option: {\n      id: 'admin.pages.MarketPlacePage.sort.alphabetical',\n      defaultMessage: 'Alphabetical order',\n    },\n  },\n  'submissionDate:desc': {\n    selected: {\n      id: 'admin.pages.MarketPlacePage.sort.newest.selected',\n      defaultMessage: 'Sort by newest',\n    },\n    option: {\n      id: 'admin.pages.MarketPlacePage.sort.newest',\n      defaultMessage: 'Newest',\n    },\n  },\n  'githubStars:desc': {\n    selected: {\n      id: 'admin.pages.MarketPlacePage.sort.githubStars.selected',\n      defaultMessage: 'Sort by GitHub stars',\n    },\n    option: {\n      id: 'admin.pages.MarketPlacePage.sort.githubStars',\n      defaultMessage: 'Number of GitHub stars',\n    },\n  },\n  'npmDownloads:desc': {\n    selected: {\n      id: 'admin.pages.MarketPlacePage.sort.npmDownloads.selected',\n      defaultMessage: 'Sort by npm downloads',\n    },\n    option: {\n      id: 'admin.pages.MarketPlacePage.sort.npmDownloads',\n      defaultMessage: 'Number of downloads',\n    },\n  },\n} as const;\n\ninterface SortSelectProps {\n  sortQuery: keyof typeof SORT_TYPES;\n  handleSelectChange: (payload: { sort: string }) => void;\n}\n\nconst SortSelect = ({ sortQuery, handleSelectChange }: SortSelectProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <SelectWrapper>\n      <SingleSelect\n        value={sortQuery}\n        customizeContent={() => formatMessage(SORT_TYPES[sortQuery].selected)}\n        onChange={(sortName) => {\n          // @ts-expect-error – in V2 design-system we'll only ever return strings.\n          handleSelectChange({ sort: sortName });\n        }}\n        aria-label={formatMessage({\n          id: 'admin.pages.MarketPlacePage.sort.label',\n          defaultMessage: 'Sort by',\n        })}\n        size=\"S\"\n      >\n        {Object.entries(SORT_TYPES).map(([sortName, messages]) => {\n          return (\n            <SingleSelectOption key={sortName} value={sortName}>\n              {formatMessage(messages.option)}\n            </SingleSelectOption>\n          );\n        })}\n      </SingleSelect>\n    </SelectWrapper>\n  );\n};\n\nconst SelectWrapper = styled<BoxComponent>(Box)`\n  font-weight: ${({ theme }) => theme.fontWeights.semiBold};\n\n  span {\n    font-size: ${({ theme }) => theme.fontSizes[1]};\n  }\n`;\n\nexport { SortSelect };\nexport type { SortSelectProps };\n", "import { useNotifyAT } from '@strapi/design-system';\nimport * as qs from 'qs';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from 'react-query';\n\nimport { useNotification } from '../../../features/Notifications';\n\nimport type { MarketplacePageQuery, NpmPackageType, TabQuery } from '../MarketplacePage';\n\nconst MARKETPLACE_API_URL = 'https://market-api.strapi.io';\n\ninterface UseMarketplaceDataParams {\n  npmPackageType: NpmPackageType;\n  debouncedSearch: string;\n  query?: MarketplacePageQuery;\n  tabQuery: TabQuery;\n  strapiVersion?: string | null;\n}\n\ntype Collections =\n  | 'Verified'\n  | 'Made by the community'\n  | 'Made by Strapi'\n  | 'Made by official partners';\n\ntype Categories = 'Custom fields' | 'Deployment' | 'Monitoring';\n\ntype FilterTypes = 'categories' | 'collections';\n\ninterface Plugin {\n  id: string;\n  attributes: {\n    name: string;\n    description: string;\n    slug: string;\n    npmPackageName: string;\n    npmPackageUrl: string;\n    npmDownloads: number;\n    repositoryUrl: string;\n    githubStars: number;\n    logo: {\n      url: string;\n    };\n    developerName: string;\n    validated: boolean;\n    madeByStrapi: boolean;\n    strapiCompatibility: string;\n    submissionDate: string;\n    collections: Collections[];\n    categories: Categories[];\n    strapiVersion: string;\n    screenshots: Array<{\n      url: string;\n    }>;\n  };\n}\n\ninterface Provider {\n  id: string;\n  attributes: {\n    name: string;\n    description: string;\n    slug: string;\n    npmPackageName: string;\n    npmPackageUrl: string;\n    npmDownloads: number;\n    repositoryUrl: string;\n    githubStars: number;\n    pluginName: string;\n    logo: {\n      url: string;\n    };\n    developerName: string;\n    validated: boolean;\n    madeByStrapi: boolean;\n    strapiCompatibility: string;\n    strapiVersion?: never;\n    submissionDate: string;\n    collections: Collections[];\n  };\n}\n\ninterface MarketplaceMeta {\n  collections: Record<Collections, number>;\n  pagination: {\n    page: number;\n    pageSize: number;\n    pageCount: number;\n    total: number;\n  };\n}\n\ninterface MarketplaceResponse<TData extends Plugin | Provider> {\n  data: TData[];\n  meta: TData extends Provider\n    ? MarketplaceMeta\n    : MarketplaceMeta & { categories: Record<Categories, number> };\n}\n\nfunction useMarketplaceData({\n  npmPackageType,\n  debouncedSearch,\n  query,\n  tabQuery,\n  strapiVersion,\n}: UseMarketplaceDataParams) {\n  const { notifyStatus } = useNotifyAT();\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const marketplaceTitle = formatMessage({\n    id: 'global.marketplace',\n    defaultMessage: 'Marketplace',\n  });\n\n  const notifyMarketplaceLoad = () => {\n    notifyStatus(\n      formatMessage(\n        {\n          id: 'app.utils.notify.data-loaded',\n          defaultMessage: 'The {target} has loaded',\n        },\n        { target: marketplaceTitle }\n      )\n    );\n  };\n\n  const paginationParams = {\n    page: query?.page || 1,\n    pageSize: query?.pageSize || 24,\n  };\n\n  const pluginParams = {\n    ...tabQuery.plugin,\n    pagination: paginationParams,\n    search: debouncedSearch,\n    version: strapiVersion,\n  };\n\n  const { data: pluginsResponse, status: pluginsStatus } = useQuery(\n    ['marketplace', 'plugins', pluginParams],\n    async () => {\n      try {\n        const queryString = qs.stringify(pluginParams);\n        const res = await fetch(`${MARKETPLACE_API_URL}/plugins?${queryString}`);\n\n        if (!res.ok) {\n          throw new Error('Failed to fetch marketplace plugins.');\n        }\n\n        const data = (await res.json()) as MarketplaceResponse<Plugin>;\n        return data;\n      } catch (error) {\n        // silence\n      }\n\n      return null;\n    },\n    {\n      onSuccess() {\n        notifyMarketplaceLoad();\n      },\n      onError() {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occured' }),\n        });\n      },\n    }\n  );\n\n  const providerParams = {\n    ...tabQuery.provider,\n    pagination: paginationParams,\n    search: debouncedSearch,\n    version: strapiVersion,\n  };\n\n  const { data: providersResponse, status: providersStatus } = useQuery(\n    ['marketplace', 'providers', providerParams],\n    async () => {\n      const queryString = qs.stringify(providerParams);\n      const res = await fetch(`${MARKETPLACE_API_URL}/providers?${queryString}`);\n\n      if (!res.ok) {\n        throw new Error('Failed to fetch marketplace providers.');\n      }\n\n      const data = (await res.json()) as MarketplaceResponse<Provider>;\n\n      return data;\n    },\n    {\n      onSuccess() {\n        notifyMarketplaceLoad();\n      },\n      onError() {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occured' }),\n        });\n      },\n    }\n  );\n\n  const npmPackageTypeResponse = npmPackageType === 'plugin' ? pluginsResponse : providersResponse;\n\n  const possibleCollections = npmPackageTypeResponse?.meta.collections ?? {};\n  const possibleCategories = pluginsResponse?.meta.categories ?? {};\n\n  const { pagination } = npmPackageTypeResponse?.meta ?? {};\n\n  return {\n    pluginsResponse,\n    providersResponse,\n    pluginsStatus,\n    providersStatus,\n    possibleCollections,\n    possibleCategories,\n    pagination,\n  };\n}\n\nexport { useMarketplaceData };\nexport type {\n  MarketplaceResponse,\n  Plugin,\n  Provider,\n  MarketplaceMeta,\n  Collections,\n  Categories,\n  FilterTypes,\n  UseMarketplaceDataParams,\n};\n", "import * as React from 'react';\n\n/**\n * For more details about this hook see:\n * https://www.30secondsofcode.org/react/s/use-navigator-on-line\n */\nexport const useNavigatorOnline = (): boolean => {\n  const onlineStatus =\n    typeof navigator !== 'undefined' && typeof navigator.onLine === 'boolean'\n      ? navigator.onLine\n      : true;\n\n  const [isOnline, setIsOnline] = React.useState(onlineStatus);\n\n  const setOnline = () => setIsOnline(true);\n  const setOffline = () => setIsOnline(false);\n\n  React.useEffect(() => {\n    window.addEventListener('online', setOnline);\n    window.addEventListener('offline', setOffline);\n\n    return () => {\n      window.removeEventListener('online', setOnline);\n      window.removeEventListener('offline', setOffline);\n    };\n  }, []);\n\n  return isOnline;\n};\n", "import * as React from 'react';\n\nimport { Box, Flex, Searchbar, Tabs } from '@strapi/design-system';\nimport { ExternalLink } from '@strapi/icons';\nimport { GlassesSquare } from '@strapi/icons/symbols';\nimport { useIntl } from 'react-intl';\n\nimport { ContentBox } from '../../components/ContentBox';\nimport { Layouts } from '../../components/Layouts/Layout';\nimport { Page } from '../../components/PageHelpers';\nimport { Pagination } from '../../components/Pagination';\nimport { useTypedSelector } from '../../core/store/hooks';\nimport { useAppInfo } from '../../features/AppInfo';\nimport { useNotification } from '../../features/Notifications';\nimport { useTracking } from '../../features/Tracking';\nimport { useDebounce } from '../../hooks/useDebounce';\nimport { useQueryParams } from '../../hooks/useQueryParams';\n\nimport { NpmPackagesFilters } from './components/NpmPackagesFilters';\nimport { NpmPackagesGrid } from './components/NpmPackagesGrid';\nimport { OfflineLayout } from './components/OfflineLayout';\nimport { PageHeader } from './components/PageHeader';\nimport { SortSelect, SortSelectProps } from './components/SortSelect';\nimport { FilterTypes, useMarketplaceData } from './hooks/useMarketplaceData';\nimport { useNavigatorOnline } from './hooks/useNavigatorOnline';\n\ntype NpmPackageType = 'plugin' | 'provider';\n\ninterface MarketplacePageQuery {\n  collections?: string[];\n  categories?: string[];\n  npmPackageType?: NpmPackageType;\n  page?: number;\n  pageSize?: number;\n  search?: string;\n  sort?: SortSelectProps['sortQuery'];\n}\n\ninterface TabQuery {\n  plugin: MarketplacePageQuery;\n  provider: MarketplacePageQuery;\n}\n\nconst PLUGIN = 'plugin';\nconst PROVIDER = 'provider';\n\nconst MarketplacePage = () => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { toggleNotification } = useNotification();\n  const [{ query }, setQuery] = useQueryParams<MarketplacePageQuery>();\n  const debouncedSearch = useDebounce(query?.search, 500) || '';\n\n  const {\n    autoReload: isInDevelopmentMode,\n    dependencies,\n    useYarn,\n    strapiVersion,\n  } = useAppInfo('MarketplacePage', (state) => state);\n  const isOnline = useNavigatorOnline();\n\n  const npmPackageType = query?.npmPackageType || PLUGIN;\n\n  const [tabQuery, setTabQuery] = React.useState<TabQuery>({\n    plugin: npmPackageType === PLUGIN ? { ...query } : {},\n    provider: npmPackageType === PROVIDER ? { ...query } : {},\n  });\n\n  React.useEffect(() => {\n    trackUsage('didGoToMarketplace');\n  }, [trackUsage]);\n\n  React.useEffect(() => {\n    if (!isInDevelopmentMode) {\n      toggleNotification({\n        type: 'info',\n        message: formatMessage({\n          id: 'admin.pages.MarketPlacePage.production',\n          defaultMessage: 'Manage plugins from the development environment',\n        }),\n      });\n    }\n  }, [toggleNotification, isInDevelopmentMode, formatMessage]);\n\n  const {\n    pluginsResponse,\n    providersResponse,\n    pluginsStatus,\n    providersStatus,\n    possibleCollections,\n    possibleCategories,\n    pagination,\n  } = useMarketplaceData({ npmPackageType, debouncedSearch, query, tabQuery, strapiVersion });\n\n  if (!isOnline) {\n    return <OfflineLayout />;\n  }\n\n  const handleTabChange = (tab: string) => {\n    const selectedTab = tab === PLUGIN || tab === PROVIDER ? tab : PLUGIN;\n\n    const hasTabQuery = tabQuery[selectedTab] && Object.keys(tabQuery[selectedTab]).length;\n\n    if (hasTabQuery) {\n      setQuery({\n        // Keep filters and search\n        ...tabQuery[selectedTab],\n        search: query?.search || '',\n        // Set tab and reset page\n        npmPackageType: selectedTab,\n        page: 1,\n      });\n    } else {\n      setQuery({\n        // Set tab\n        npmPackageType: selectedTab,\n        // Clear filters\n        collections: [],\n        categories: [],\n        sort: 'name:asc',\n        page: 1,\n        // Keep search\n        search: query?.search || '',\n      });\n    }\n  };\n\n  const handleSelectChange = (update: Partial<MarketplacePageQuery>) => {\n    setQuery({ ...update, page: 1 });\n    setTabQuery((prev) => ({\n      ...prev,\n      [npmPackageType]: { ...prev[npmPackageType], ...update },\n    }));\n  };\n\n  const handleSelectClear = (filterType: FilterTypes) => {\n    setQuery({ [filterType]: [], page: undefined }, 'remove');\n    setTabQuery((prev) => ({ ...prev, [npmPackageType]: {} }));\n  };\n\n  const handleSortSelectChange: SortSelectProps['handleSelectChange'] = ({ sort }) =>\n    // @ts-expect-error - this is a narrowing issue.\n    handleSelectChange({ sort });\n\n  // Check if plugins and providers are installed already\n  const installedPackageNames = Object.keys(dependencies ?? {});\n\n  return (\n    <Layouts.Root>\n      <Page.Main>\n        <Page.Title>\n          {formatMessage({\n            id: 'admin.pages.MarketPlacePage.head',\n            defaultMessage: 'Marketplace - Plugins',\n          })}\n        </Page.Title>\n        <PageHeader isOnline={isOnline} npmPackageType={npmPackageType} />\n        <Layouts.Content>\n          <Tabs.Root variant=\"simple\" onValueChange={handleTabChange} value={npmPackageType}>\n            <Flex justifyContent=\"space-between\" paddingBottom={4}>\n              <Tabs.List\n                aria-label={formatMessage({\n                  id: 'admin.pages.MarketPlacePage.tab-group.label',\n                  defaultMessage: 'Plugins and Providers for Strapi',\n                })}\n              >\n                <Tabs.Trigger value={PLUGIN}>\n                  {formatMessage({\n                    id: 'admin.pages.MarketPlacePage.plugins',\n                    defaultMessage: 'Plugins',\n                  })}{' '}\n                  {pluginsResponse ? `(${pluginsResponse.meta.pagination.total})` : '...'}\n                </Tabs.Trigger>\n                <Tabs.Trigger value={PROVIDER}>\n                  {formatMessage({\n                    id: 'admin.pages.MarketPlacePage.providers',\n                    defaultMessage: 'Providers',\n                  })}{' '}\n                  {providersResponse ? `(${providersResponse.meta.pagination.total})` : '...'}\n                </Tabs.Trigger>\n              </Tabs.List>\n\n              <Box width=\"25%\">\n                <Searchbar\n                  name=\"searchbar\"\n                  onClear={() => setQuery({ search: '', page: 1 })}\n                  value={query?.search}\n                  onChange={(e) => setQuery({ search: e.target.value, page: 1 })}\n                  clearLabel={formatMessage({\n                    id: 'admin.pages.MarketPlacePage.search.clear',\n                    defaultMessage: 'Clear the search',\n                  })}\n                  placeholder={formatMessage({\n                    id: 'admin.pages.MarketPlacePage.search.placeholder',\n                    defaultMessage: 'Search',\n                  })}\n                >\n                  {formatMessage({\n                    id: 'admin.pages.MarketPlacePage.search.placeholder',\n                    defaultMessage: 'Search',\n                  })}\n                </Searchbar>\n              </Box>\n            </Flex>\n            <Flex paddingBottom={4} gap={2}>\n              <SortSelect\n                sortQuery={query?.sort || 'name:asc'}\n                handleSelectChange={handleSortSelectChange}\n              />\n              <NpmPackagesFilters\n                npmPackageType={npmPackageType}\n                possibleCollections={possibleCollections}\n                possibleCategories={possibleCategories}\n                query={query || {}}\n                handleSelectChange={handleSelectChange}\n                handleSelectClear={handleSelectClear}\n              />\n            </Flex>\n            <Tabs.Content value={PLUGIN}>\n              <NpmPackagesGrid\n                npmPackages={pluginsResponse?.data}\n                status={pluginsStatus}\n                installedPackageNames={installedPackageNames}\n                useYarn={useYarn}\n                isInDevelopmentMode={isInDevelopmentMode}\n                npmPackageType=\"plugin\"\n                strapiAppVersion={strapiVersion}\n                debouncedSearch={debouncedSearch}\n              />\n            </Tabs.Content>\n            <Tabs.Content value={PROVIDER}>\n              <NpmPackagesGrid\n                npmPackages={providersResponse?.data}\n                status={providersStatus}\n                installedPackageNames={installedPackageNames}\n                useYarn={useYarn}\n                isInDevelopmentMode={isInDevelopmentMode}\n                npmPackageType=\"provider\"\n                debouncedSearch={debouncedSearch}\n              />\n            </Tabs.Content>\n            <Pagination.Root {...pagination} defaultPageSize={24}>\n              <Pagination.PageSize options={['12', '24', '50', '100']} />\n              <Pagination.Links />\n            </Pagination.Root>\n            <Box paddingTop={8}>\n              <a\n                href=\"https://strapi.canny.io/plugin-requests\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer nofollow\"\n                style={{ textDecoration: 'none' }}\n                onClick={() => trackUsage('didMissMarketplacePlugin')}\n              >\n                <ContentBox\n                  title={formatMessage({\n                    id: 'admin.pages.MarketPlacePage.missingPlugin.title',\n                    defaultMessage: 'Documentation',\n                  })}\n                  subtitle={formatMessage({\n                    id: 'admin.pages.MarketPlacePage.missingPlugin.description',\n                    defaultMessage:\n                      \"Tell us what plugin you are looking for and we'll let our community plugin developers know in case they are in search for inspiration!\",\n                  })}\n                  icon={<GlassesSquare />}\n                  iconBackground=\"alternative100\"\n                  endAction={\n                    <ExternalLink\n                      fill=\"neutral600\"\n                      width=\"1.2rem\"\n                      height=\"1.2rem\"\n                      style={{ marginLeft: '0.8rem' }}\n                    />\n                  }\n                />\n              </a>\n            </Box>\n          </Tabs.Root>\n        </Layouts.Content>\n      </Page.Main>\n    </Layouts.Root>\n  );\n};\n\nconst ProtectedMarketplacePage = () => {\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.marketplace?.main);\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <MarketplacePage />\n    </Page.Protect>\n  );\n};\n\nexport { MarketplacePage, ProtectedMarketplacePage };\nexport type { NpmPackageType, MarketplacePageQuery, TabQuery };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,SAASA,YAAoBC,OAAeC,OAAa;AAC9D,QAAM,CAACC,gBAAgBC,iBAAAA,IAA2BC,eAASJ,KAAAA;AAE3DK,EAAMC,gBAAU,MAAA;AACd,UAAMC,UAAUC,WAAW,MAAA;AACzBL,wBAAkBH,KAAAA;OACjBC,KAAAA;AAEH,WAAO,MAAA;AACLQ,mBAAaF,OAAAA;IACf;KACC;IAACP;IAAOC;EAAM,CAAA;AAEjB,SAAOC;AACT;;;;;ACWA,IAAMQ,qBAAqB,CAAC,EAC1BC,mBACAC,oBACAC,gBACAC,oBACAC,qBACAC,MAAK,MACmB;;AACxB,QAAM,EAAEC,cAAa,IAAKC,QAAAA;AAE1B,QAAMC,kBAAkB,CAACC,aAAqBC,eAAAA;AAC5C,UAAMC,SAAS;MACb,CAACD,UAAW,IAAGL,MAAMK,UAAAA,KAAe,CAAA,GAAIE,OAAO,CAACC,gBAAgBA,gBAAgBJ,WAAAA;IAClF;AAEAR,uBAAmBU,MAAAA;EACrB;AAEA,aACEG,yBAACC,QAAQC,MAAI;;UACXC,wBAACF,QAAQG,SAAO;QACd,cAAAD,wBAACE,QAAAA;UAAOC,SAAQ;UAAWC,eAAWJ,wBAACK,eAAAA,CAAAA,CAAAA;oBACpChB,cAAc;YAAEiB,IAAI;YAAqBC,gBAAgB;UAAU,CAAA;;;UAGxEP,wBAACF,QAAQU,SAAO;QAACC,YAAY;QAC3B,cAAAZ,yBAACa,MAAAA;UAAKC,SAAS;UAAGC,WAAU;UAASC,YAAW;UAAUC,KAAK;;gBAC7Dd,wBAACe,cAAAA;cACCC,SAAS3B,cAAc;gBACrBiB,IAAI;gBACJC,gBAAgB;cAClB,CAAA;cACAU,QAAO7B,+BAAO8B,gBAAe,CAAA;cAC7BC,UAAU,CAACC,mBAAAA;AACT,sBAAM1B,SAAS;kBAAEwB,aAAaE;gBAAe;AAC7CpC,mCAAmBU,MAAAA;cACrB;cACA2B,SAAS,MAAMtC,kBAAkB,aAAA;cACjCuC,iBAAiBnC;cACjBoC,kBAAkB,CAACC,WACjBnC,cACE;gBACEiB,IAAI;gBACJC,gBACE;iBAEJ;gBAAEkB,QAAOD,iCAAQE,WAAU;cAAE,CAAA;;YAIlCzC,mBAAmB,gBAClBe,wBAACe,cAAAA;cACCC,SAAS3B,cAAc;gBACrBiB,IAAI;gBACJC,gBAAgB;cAClB,CAAA;cACAU,QAAO7B,+BAAOuC,eAAc,CAAA;cAC5BR,UAAU,CAACS,kBAAAA;AACT,sBAAMlC,SAAS;kBAAEiC,YAAYC;gBAAc;AAC3C5C,mCAAmBU,MAAAA;cACrB;cACA2B,SAAS,MAAMtC,kBAAkB,YAAA;cACjCuC,iBAAiBpC;cACjBqC,kBAAkB,CAACC,WACjBnC,cACE;gBACEiB,IAAI;gBACJC,gBACE;iBAEJ;gBAAEkB,QAAOD,iCAAQE,WAAU;cAAE,CAAA;;;;;OAQxCtC,WAAM8B,gBAAN9B,mBAAmByC,IAAI,CAACC,mBACvB9B,wBAAC+B,KAAAA;QAAqBpB,SAAS;QAC7B,cAAAX,wBAACgC,KAAAA;UAAIC,UAAMjC,wBAACkC,eAAAA,CAAAA,CAAAA;UAAUC,SAAS,MAAM5C,gBAAgBuC,YAAY,aAAA;UAC9DA,UAAAA;;MAFKA,GAAAA,UAAAA;MAMX7C,mBAAmB,cAClBG,WAAMuC,eAANvC,mBAAkByC,IAAI,CAACO,iBACrBpC,wBAAC+B,KAAAA;QAAmBpB,SAAS;QAC3B,cAAAX,wBAACgC,KAAAA;UAAIC,UAAMjC,wBAACkC,eAAAA,CAAAA,CAAAA;UAAUC,SAAS,MAAM5C,gBAAgB6C,UAAU,YAAA;UAC5DA,UAAAA;;MAFKA,GAAAA,QAAAA;;;AAQpB;AAcA,IAAMrB,eAAe,CAAC,EACpBC,SACAC,OACAE,UACAG,iBACAD,SACAE,iBAAgB,MACE;AAClB,aACEvB,wBAACqC,aAAAA;IACCC,eAAa,GAAGtB,OAAQ;IACxBuB,cAAYvB;IACZwB,aAAaxB;IACbG;IACAE;IACAJ;IACAM;cAECkB,OAAOC,QAAQpB,eAAiBO,EAAAA,IAAI,CAAC,CAACc,YAAYlB,KAAM,MAAA;AACvD,iBACEzB,wBAAC4C,mBAAAA;QACCN,eAAa,GAAGK,UAAAA,IAAclB,KAAAA;QAE9BR,OAAO0B;QAEN,UAAA,GAAGA,UAAW,KAAIlB,KAAAA;MAHdkB,GAAAA,UAAAA;IAMX,CAAA;;AAGN;;;;;;;;;AC5IA,IAAME,eAAeC,GAAiCC,UAAAA;;;;;;AAetD,IAAMC,iBAAiB,CAAC,EACtBC,YACAC,aACAC,SACAC,qBACAC,gBACAC,iBAAgB,MACI;AACpB,QAAM,EAAEC,WAAU,IAAKN;AACvB,QAAM,EAAEO,cAAa,IAAKC,QAAAA;AAC1B,QAAM,EAAEC,WAAU,IAAKC,YAAAA;AAEvB,QAAMC,gBAAgBT,UAClB,YAAYI,WAAWM,cAAc,KACrC,eAAeN,WAAWM,cAAc;AAE5C,QAAMC,sBAAsBN,cAAc;IACxCO,IAAI;IACJC,gBAAgB;EAClB,CAAA;AAEA,QAAMC,iBAAiB,4BAA4BC,iBAAAA,QAAUC,OAAOd,cAAAA,CAAAA,IAClEE,WAAWa,IAAI;AAGjB,QAAMC,eAAsBC,kBAAWf,WAAWgB,aAAa;AAE/D,QAAMC,eAAeH,eACVI,iBAAUnB,oBAAoB,IAAIe,YACzC,IAAA;AAEJ,aACEK,0BAACC,MAAAA;IACCC,WAAU;IACVC,gBAAe;IACfC,YAAY;IACZC,cAAc;IACdC,eAAe;IACfC,aAAa;IACbC,WAAS;IACTC,YAAW;IACXC,QAAO;IACPC,QAAO;IACPC,YAAW;IACXC,eAAY;;UAEZb,0BAACc,KAAAA;;cACCd,0BAACC,MAAAA;YAAKC,WAAU;YAAMC,gBAAe;YAAgBS,YAAW;;kBAC9DG,yBAACD,KAAAA;gBACCE,KAAI;gBACJC,KAAKpC,WAAWqC,KAAKC;gBACrBC,KAAK,GAAGvC,WAAWwC,IAAI;gBACvBb,WAAS;gBACTc,OAAO;gBACPX,QAAQ;;kBAEVI,yBAACQ,cAAAA;gBACCC,aAAa3C,WAAW2C;gBACxBC,cAAc5C,WAAW4C;gBACzB9C;;;;cAGJoC,yBAACD,KAAAA;YAAIV,YAAY;YACf,cAAAW,yBAAC1C,YAAAA;cAAW2C,KAAI;cAAKU,SAAQ;cAC3B,cAAA1B,0BAACC,MAAAA;gBACCW,YAAW;gBACXe,KAAK9C,WAAW+C,aAAa,CAAC/C,WAAWgD,eAAe,IAAI;;kBAE3DhD,WAAWwC;kBACXxC,WAAW+C,aAAa,CAAC/C,WAAWgD,oBACnCd,yBAACe,aAAAA;oBACCC,aAAajD,cAAc;sBACzBO,IAAI;sBACJC,gBAAgB;oBAClB,CAAA;oBAEA,cAAAyB,yBAACiB,eAAAA;sBAAYC,MAAK;;;kBAGrBpD,WAAWgD,oBACVd,yBAACe,aAAAA;oBAAQC,aAAa3C;oBACpB,cAAA2B,yBAACD,KAAAA;sBACCE,KAAI;sBACJC,KAAKiB;sBACLd,KAAKhC;sBACLkC,OAAO;sBACPX,QAAO;;;;;;;cAOnBI,yBAACD,KAAAA;YAAIV,YAAY;YACf,cAAAW,yBAAC5C,cAAAA;cAAa6C,KAAI;cAAIU,SAAQ;cAAQS,WAAU;cAC7CtD,UAAAA,WAAWkD;;;;;UAKlB/B,0BAACC,MAAAA;QAAK0B,KAAK;QAAGS,OAAO;UAAEC,WAAW;QAAW;QAAGjC,YAAY;;cAC1DW,yBAACuB,YAAAA;YACCC,MAAK;YACLC,MAAMjD;YACNkD,YAAU;YACVC,aAAS3B,yBAAC4B,eAAAA,CAAAA,CAAAA;YACVC,cAAY9D,cACV;cACEO,IAAI;cACJC,gBAAgB;eAElB;cAAEuD,YAAYhE,WAAWwC;YAAK,CAAA;YAEhCK,SAAQ;YACRoB,SAAS,MAAM9D,WAAW,oBAAA;sBAEzBF,cAAc;cACbO,IAAI;cACJC,gBAAgB;YAClB,CAAA;;cAEFyB,yBAACgC,qBAAAA;YACCvE;YACAE;YACAoB;YACAZ;YACAN;YACAoE,sBAAsBnE,WAAWgB;YACjCgD,YAAYhE,WAAWwC;;;;;;AAKjC;AAcA,IAAM0B,sBAAsB,CAAC,EAC3BvE,aACAE,qBACAoB,cACAZ,eACAN,kBACAoE,sBACAH,WAAU,MACe;AACzB,QAAM,EAAEI,mBAAkB,IAAKC,gBAAAA;AAC/B,QAAM,EAAEpE,cAAa,IAAKC,QAAAA;AAC1B,QAAM,EAAEC,WAAU,IAAKC,YAAAA;AACvB,QAAM,EAAEkE,KAAI,IAAKC,aAAAA;AAEjB,QAAMC,aAAa,YAAA;AACjB,UAAMC,UAAU,MAAMH,KAAKjE,aAAAA;AAE3B,QAAIoE,SAAS;AACXtE,iBAAW,mBAAA;AACXiE,yBAAmB;QACjBM,MAAM;QACNC,SAAS1E,cAAc;UAAEO,IAAI;QAAkD,CAAA;MACjF,CAAA;IACF;EACF;AAGA,MAAIb,aAAa;AACf,eACEwB,0BAACC,MAAAA;MAAK0B,KAAK;MAAGpB,aAAa;;YACzBQ,yBAAC0C,eAAAA;UAAMnC,OAAM;UAASX,QAAO;UAAS+C,OAAM;;YAC5C3C,yBAAC1C,YAAAA;UAAWqD,SAAQ;UAAQS,WAAU;UAAawB,YAAW;oBAC3D7E,cAAc;YACbO,IAAI;YACJC,gBAAgB;UAClB,CAAA;;;;EAIR;AAGA,MAAIZ,uBAAuBoB,iBAAiB,OAAO;AACjD,eACEiB,yBAAC6C,YAAAA;MACChF;MACAoE;MACAK;MACAR;;EAGN;AAGA,SAAO;AACT;AAYA,IAAMe,aAAa,CAAC,EAClBZ,sBACApE,kBACAyE,YACAR,WAAU,MACM;AAChB,QAAM,EAAE/D,cAAa,IAAKC,QAAAA;AAC1B,QAAMY,eAAsBC,kBAAWoD,oBAAAA;AACvC,QAAMlD,eAAsBC,iBAAUnB,oBAAoB,IAAIe,gBAAgB,EAAA;AAE9E,QAAMkE,iBAAiB/E,cAAc;IACnCO,IAAI;IACJC,gBAAgB;EAClB,CAAA;AAGA,MAAIV,kBAAkB;AACpB,QAAI,CAACe,gBAAgB,CAACG,cAAc;AAClC,iBACEiB,yBAACe,aAAAA;QACCjB,eAAa,WAAWgC,UAAAA;QACxBiB,OAAOhF,cACL;UACEO,IAAI;UACJC,gBACE;WAEJ;UACEV;UACAe;QACF,CAAA;QAGF,cAAAoB,yBAACgD,QAAAA;UACC,cAAAhD,yBAACiD,QAAAA;YACCzB,MAAK;YACL0B,eAAWlD,yBAACmD,eAAAA,CAAAA,CAAAA;YACZxC,SAAQ;YACRoB,SAASO;YACTc,UAAU,CAACrE;YAEV+D,UAAAA;;;;IAKX;EACF;AAEA,aACE9C,yBAACiD,QAAAA;IAAOzB,MAAK;IAAI0B,eAAWlD,yBAACmD,eAAAA,CAAAA,CAAAA;IAAcxC,SAAQ;IAAYoB,SAASO;IACrEQ,UAAAA;;AAGP;AAYA,IAAMtC,eAAe,CAAC,EAAEC,cAAc,GAAGC,eAAe,GAAG9C,eAAc,MAAqB;AAC5F,QAAM,EAAEG,cAAa,IAAKC,QAAAA;AAE1B,aACEiB,0BAACC,MAAAA;IAAK0B,KAAK;;MACR,CAAC,CAACH,mBACDxB,0BAAAoE,8BAAA;;cACErD,yBAACsD,cAAAA;YAAO1D,QAAO;YAASW,OAAM;YAASgD,eAAW;;cAClDvD,yBAACwD,cAAAA;YAAK5D,QAAO;YAASW,OAAM;YAASW,MAAK;YAAaqC,eAAW;;cAClEvD,yBAACyD,KAAAA;YACC5B,cAAY9D,cACV;cACEO,IAAI,+BAA+BV,cAAAA;cACnCW,gBAAgB;eAElB;cACEmF,YAAYjD;cACZkD,SAAS/F;YACX,CAAA;YAGF,cAAAoC,yBAAC1C,YAAAA;cAAWqD,SAAQ;cAAKS,WAAU;cAChCX,UAAAA;;;cAGLT,yBAAC4D,iBAAAA,CAAAA,CAAAA;;;UAGL5D,yBAAC6D,eAAAA;QAASjE,QAAO;QAASW,OAAM;QAASgD,eAAW;;UACpDvD,yBAACyD,KAAAA;QACC5B,cAAY9D,cACV;UACEO,IAAI,+BAA+BV,cAAAA;UACnCW,gBAAgB;WAElB;UACEuF,gBAAgBpD;UAChBiD,SAAS/F;QACX,CAAA;QAGF,cAAAoC,yBAAC1C,YAAAA;UAAWqD,SAAQ;UAAKS,WAAU;UAChCV,UAAAA;;;;;AAKX;AAEA,IAAMkD,kBAAkBvG,GAAO0G,OAAAA;;;;;;AC7VzBC,IAAAA,kBAAkB,CAAC,EACvBC,QACAC,cAAc,CAAA,GACdC,wBAAwB,CAAA,GACxBC,SACAC,qBACAC,gBACAC,kBACAC,gBAAe,MACM;AACrB,QAAM,EAAEC,cAAa,IAAKC,QAAAA;AAE1B,MAAIT,WAAW,SAAS;AACtB,eAAOU,yBAACC,KAAKC,OAAK,CAAA,CAAA;EACpB;AAEA,MAAIZ,WAAW,WAAW;AACxB,eAAOU,yBAACC,KAAKE,SAAO,CAAA,CAAA;EACtB;AAEA,QAAMC,qBAAqBN,cACzB;IACEO,IAAI;IACJC,gBAAgB;KAElB;IAAEC,QAAQV;EAAgB,CAAA;AAG5B,MAAIN,YAAYiB,WAAW,GAAG;AAC5B,eACEC,0BAACC,KAAAA;MAAIC,UAAS;;YACZX,yBAACY,QAAQC,MAAI;UAACC,MAAK;oBAChBC,MAAM,EAAA,EACJC,KAAK,IAAA,EACLC,IAAI,CAACC,GAAGC,YACPnB,yBAACoB,iBAAAA;YAA0BC,QAAO;YAAQC,WAAS;UAA7BH,GAAAA,GAAAA,CAAAA;;YAG5BnB,yBAACU,KAAAA;UAAIC,UAAS;UAAWY,KAAK;UAAIC,OAAM;UACtC,cAAAf,0BAACgB,MAAAA;YAAKC,YAAW;YAASC,gBAAe;YAASC,WAAU;;kBAC1D5B,yBAAC6B,cAAAA;gBAAeL,OAAM;gBAAQH,QAAO;;kBACrCrB,yBAACU,KAAAA;gBAAIoB,YAAY;gBACf,cAAA9B,yBAAC+B,YAAAA;kBAAWC,SAAQ;kBAAQC,KAAI;kBAAIC,WAAU;kBAC3C9B,UAAAA;;;;;;;;EAOf;AAEA,aACEJ,yBAACa,KAAKsB,MAAI;IAACC,KAAK;IACb7C,UAAAA,YAAY0B,IAAI,CAACoB,mBAChBrC,yBAACa,KAAKyB,MAAI;MACRC,KAAK;MACLC,GAAG;MACHC,IAAI;MACJC,OAAO;QAAErB,QAAQ;MAAO;MAExBO,WAAU;MACVF,YAAW;MAEX,cAAA1B,yBAAC2C,gBAAAA;QACCN;QACAO,aAAapD,sBAAsBqD,SAASR,WAAWS,WAAWC,cAAc;QAChFtD;QACAC;QACAC;QACAC;;IAVGyC,GAAAA,WAAWhC,EAAE,CAAA;;AAgB5B;AAEA,IAAMe,kBAAkB4B,GAAqBtC,GAAAA;gBAC7B,CAAC,EAAEuC,MAAK,MACpB,sDAAsDA,MAAMC,OAAOC,UAAU,QAAQ;;;;;;;;;ACxFzF,IAAMC,aAAa,CAAC,EAAEC,UAAUC,iBAAiB,SAAQ,MAAmB;AAC1E,QAAM,EAAEC,cAAa,IAAKC,QAAAA;AAC1B,QAAM,EAAEC,WAAU,IAAKC,YAAAA;AAEvB,QAAMC,WAAWL,mBAAmB,aAAa,sBAAsB;AAEvE,aACEM,yBAACC,QAAQC,QAAM;IACbC,OAAOR,cAAc;MACnBS,IAAI;MACJC,gBAAgB;IAClB,CAAA;IACAC,UAAUX,cAAc;MACtBS,IAAI;MACJC,gBAAgB;IAClB,CAAA;IACAE,eACEd,gBACEO,yBAACQ,YAAAA;MACCC,eAAWT,yBAACU,cAAAA,CAAAA,CAAAA;MACZC,SAAQ;MACRC,MAAM,mCAAmClB,cAAAA;MACzCmB,SAAS,MAAMhB,WAAWE,QAAAA;MAC1Be,YAAU;gBAETnB,cAAc;QACbS,IAAI,sCAAsCV,cAAAA;QAC1CW,gBAAgB,UAAUX,cAAAA;MAC5B,CAAA;;;AAMZ;;;ACzCA,IAAMqB,gBAAgB,MAAA;AACpB,QAAM,EAAEC,cAAa,IAAKC,QAAAA;AAE1B,aACEC,yBAACC,QAAQC,MAAI;IACX,cAAAC,0BAACC,MAAAA;;YACCJ,yBAACK,YAAAA,CAAAA,CAAAA;YACDF,0BAACG,MAAAA;UACCC,OAAM;UACNC,WAAU;UACVC,YAAW;UACXC,gBAAe;UACfC,YAAY;;gBAEZX,yBAACY,KAAAA;cAAIC,eAAe;cAClB,cAAAb,yBAACc,YAAAA;gBAAWC,WAAU;gBAAaC,SAAQ;0BACxClB,cAAc;kBACbmB,IAAI;kBACJC,gBAAgB;gBAClB,CAAA;;;gBAGJlB,yBAACY,KAAAA;cAAIC,eAAe;cAClB,cAAAb,yBAACc,YAAAA;gBAAWC,WAAU;gBAAaC,SAAQ;0BACxClB,cAAc;kBACbmB,IAAI;kBACJC,gBAAgB;gBAClB,CAAA;;;gBAGJf,0BAACgB,OAAAA;cACCZ,OAAM;cACNa,QAAO;cACPC,SAAQ;cACRC,MAAK;cACLC,OAAM;;oBAENvB,yBAACwB,QAAAA;kBAAKC,GAAE;kBAAKC,GAAE;kBAAKnB,OAAM;kBAAKa,QAAO;kBAAKO,IAAG;kBAAOL,MAAK;;oBAC1DtB,yBAAC4B,QAAAA;kBACCC,GAAE;kBACFP,MAAK;;oBAEPtB,yBAACwB,QAAAA;kBAAKC,GAAE;kBAAKC,GAAE;kBAAKnB,OAAM;kBAAKa,QAAO;kBAAKO,IAAG;kBAAOG,QAAO;;;;;;;;;AAMxE;;;;ACnDA,IAAMC,aAAa;EACjB,YAAY;IACVC,UAAU;MACRC,IAAI;MACJC,gBAAgB;IAClB;IACAC,QAAQ;MACNF,IAAI;MACJC,gBAAgB;IAClB;EACF;EACA,uBAAuB;IACrBF,UAAU;MACRC,IAAI;MACJC,gBAAgB;IAClB;IACAC,QAAQ;MACNF,IAAI;MACJC,gBAAgB;IAClB;EACF;EACA,oBAAoB;IAClBF,UAAU;MACRC,IAAI;MACJC,gBAAgB;IAClB;IACAC,QAAQ;MACNF,IAAI;MACJC,gBAAgB;IAClB;EACF;EACA,qBAAqB;IACnBF,UAAU;MACRC,IAAI;MACJC,gBAAgB;IAClB;IACAC,QAAQ;MACNF,IAAI;MACJC,gBAAgB;IAClB;EACF;AACF;AAOA,IAAME,aAAa,CAAC,EAAEC,WAAWC,mBAAkB,MAAmB;AACpE,QAAM,EAAEC,cAAa,IAAKC,QAAAA;AAE1B,aACEC,yBAACC,eAAAA;IACC,cAAAD,yBAACE,cAAAA;MACCC,OAAOP;MACPQ,kBAAkB,MAAMN,cAAcR,WAAWM,SAAAA,EAAWL,QAAQ;MACpEc,UAAU,CAACC,aAAAA;AAETT,2BAAmB;UAAEU,MAAMD;QAAS,CAAA;MACtC;MACAE,cAAYV,cAAc;QACxBN,IAAI;QACJC,gBAAgB;MAClB,CAAA;MACAgB,MAAK;gBAEJC,OAAOC,QAAQrB,UAAYsB,EAAAA,IAAI,CAAC,CAACN,UAAUO,QAAS,MAAA;AACnD,mBACEb,yBAACc,oBAAAA;UAAkCX,OAAOG;UACvCR,UAAAA,cAAce,SAASnB,MAAM;QADPY,GAAAA,QAAAA;MAI7B,CAAA;;;AAIR;AAEA,IAAML,gBAAgBc,GAAqBC,GAAAA;iBAC1B,CAAC,EAAEC,MAAK,MAAOA,MAAMC,YAAYC,QAAQ;;;iBAGzC,CAAC,EAAEF,MAAK,MAAOA,MAAMG,UAAU,CAAA,CAAE;;;;;;AC7ElD,IAAMC,sBAAsB;AA0F5B,SAASC,mBAAmB,EAC1BC,gBACAC,iBACAC,OACAC,UACAC,cAAa,GACY;AACzB,QAAM,EAAEC,aAAY,IAAKC,YAAAA;AACzB,QAAM,EAAEC,cAAa,IAAKC,QAAAA;AAC1B,QAAM,EAAEC,mBAAkB,IAAKC,gBAAAA;AAC/B,QAAMC,mBAAmBJ,cAAc;IACrCK,IAAI;IACJC,gBAAgB;EAClB,CAAA;AAEA,QAAMC,wBAAwB,MAAA;AAC5BT,iBACEE,cACE;MACEK,IAAI;MACJC,gBAAgB;OAElB;MAAEE,QAAQJ;IAAiB,CAAA,CAAA;EAGjC;AAEA,QAAMK,mBAAmB;IACvBC,OAAMf,+BAAOe,SAAQ;IACrBC,WAAUhB,+BAAOgB,aAAY;EAC/B;AAEA,QAAMC,eAAe;IACnB,GAAGhB,SAASiB;IACZC,YAAYL;IACZM,QAAQrB;IACRsB,SAASnB;EACX;AAEA,QAAM,EAAEoB,MAAMC,iBAAiBC,QAAQC,cAAa,IAAKC,SACvD;IAAC;IAAe;IAAWT;KAC3B,YAAA;AACE,QAAI;AACF,YAAMU,cAAiBC,aAAUX,YAAAA;AACjC,YAAMY,MAAM,MAAMC,MAAM,GAAGlC,mBAAoB,YAAW+B,WAAAA,EAAa;AAEvE,UAAI,CAACE,IAAIE,IAAI;AACX,cAAM,IAAIC,MAAM,sCAAA;MAClB;AAEA,YAAMV,OAAQ,MAAMO,IAAII,KAAI;AAC5B,aAAOX;IACT,SAASY,OAAO;IAEhB;AAEA,WAAO;KAET;IACEC,YAAAA;AACEvB,4BAAAA;IACF;IACAwB,UAAAA;AACE7B,yBAAmB;QACjB8B,MAAM;QACNC,SAASjC,cAAc;UAAEK,IAAI;UAAsBC,gBAAgB;QAAmB,CAAA;MACxF,CAAA;IACF;EACF,CAAA;AAGF,QAAM4B,iBAAiB;IACrB,GAAGtC,SAASuC;IACZrB,YAAYL;IACZM,QAAQrB;IACRsB,SAASnB;EACX;AAEA,QAAM,EAAEoB,MAAMmB,mBAAmBjB,QAAQkB,gBAAe,IAAKhB,SAC3D;IAAC;IAAe;IAAaa;KAC7B,YAAA;AACE,UAAMZ,cAAiBC,aAAUW,cAAAA;AACjC,UAAMV,MAAM,MAAMC,MAAM,GAAGlC,mBAAoB,cAAa+B,WAAAA,EAAa;AAEzE,QAAI,CAACE,IAAIE,IAAI;AACX,YAAM,IAAIC,MAAM,wCAAA;IAClB;AAEA,UAAMV,OAAQ,MAAMO,IAAII,KAAI;AAE5B,WAAOX;KAET;IACEa,YAAAA;AACEvB,4BAAAA;IACF;IACAwB,UAAAA;AACE7B,yBAAmB;QACjB8B,MAAM;QACNC,SAASjC,cAAc;UAAEK,IAAI;UAAsBC,gBAAgB;QAAmB,CAAA;MACxF,CAAA;IACF;EACF,CAAA;AAGF,QAAMgC,yBAAyB7C,mBAAmB,WAAWyB,kBAAkBkB;AAE/E,QAAMG,uBAAsBD,iEAAwBE,KAAKC,gBAAe,CAAA;AACxE,QAAMC,sBAAqBxB,mDAAiBsB,KAAKG,eAAc,CAAA;AAE/D,QAAM,EAAE7B,WAAU,KAAKwB,iEAAwBE,SAAQ,CAAA;AAEvD,SAAO;IACLtB;IACAkB;IACAhB;IACAiB;IACAE;IACAG;IACA5B;EACF;AACF;;;;ICtNa8B,qBAAqB,MAAA;AAChC,QAAMC,eACJ,OAAOC,cAAc,eAAe,OAAOA,UAAUC,WAAW,YAC5DD,UAAUC,SACV;AAEN,QAAM,CAACC,UAAUC,WAAAA,IAAqBC,gBAASL,YAAAA;AAE/C,QAAMM,YAAY,MAAMF,YAAY,IAAA;AACpC,QAAMG,aAAa,MAAMH,YAAY,KAAA;AAErCI,EAAMC,iBAAU,MAAA;AACdC,WAAOC,iBAAiB,UAAUL,SAAAA;AAClCI,WAAOC,iBAAiB,WAAWJ,UAAAA;AAEnC,WAAO,MAAA;AACLG,aAAOE,oBAAoB,UAAUN,SAAAA;AACrCI,aAAOE,oBAAoB,WAAWL,UAAAA;IACxC;EACF,GAAG,CAAA,CAAE;AAEL,SAAOJ;AACT;;;ACeA,IAAMU,SAAS;AACf,IAAMC,WAAW;AAEjB,IAAMC,kBAAkB,MAAA;AACtB,QAAM,EAAEC,cAAa,IAAKC,QAAAA;AAC1B,QAAM,EAAEC,WAAU,IAAKC,YAAAA;AACvB,QAAM,EAAEC,mBAAkB,IAAKC,gBAAAA;AAC/B,QAAM,CAAC,EAAEC,MAAK,GAAIC,QAAAA,IAAYC,eAAAA;AAC9B,QAAMC,kBAAkBC,YAAYJ,+BAAOK,QAAQ,GAAQ,KAAA;AAE3D,QAAM,EACJC,YAAYC,qBACZC,cACAC,SACAC,cAAa,IACXC,WAAW,mBAAmB,CAACC,UAAUA,KAAAA;AAC7C,QAAMC,WAAWC,mBAAAA;AAEjB,QAAMC,kBAAiBf,+BAAOe,mBAAkBxB;AAEhD,QAAM,CAACyB,UAAUC,WAAAA,IAAqBC,gBAAmB;IACvDC,QAAQJ,mBAAmBxB,SAAS;MAAE,GAAGS;IAAM,IAAI,CAAA;IACnDoB,UAAUL,mBAAmBvB,WAAW;MAAE,GAAGQ;IAAM,IAAI,CAAA;EACzD,CAAA;AAEAqB,EAAMC,iBAAU,MAAA;AACd1B,eAAW,oBAAA;KACV;IAACA;EAAW,CAAA;AAEfyB,EAAMC,iBAAU,MAAA;AACd,QAAI,CAACf,qBAAqB;AACxBT,yBAAmB;QACjByB,MAAM;QACNC,SAAS9B,cAAc;UACrB+B,IAAI;UACJC,gBAAgB;QAClB,CAAA;MACF,CAAA;IACF;KACC;IAAC5B;IAAoBS;IAAqBb;EAAc,CAAA;AAE3D,QAAM,EACJiC,iBACAC,mBACAC,eACAC,iBACAC,qBACAC,oBACAC,WAAU,IACRC,mBAAmB;IAAEnB;IAAgBZ;IAAiBH;IAAOgB;IAAUN;EAAc,CAAA;AAEzF,MAAI,CAACG,UAAU;AACb,eAAOsB,yBAACC,eAAAA,CAAAA,CAAAA;EACV;AAEA,QAAMC,kBAAkB,CAACC,QAAAA;AACvB,UAAMC,cAAcD,QAAQ/C,UAAU+C,QAAQ9C,WAAW8C,MAAM/C;AAE/D,UAAMiD,cAAcxB,SAASuB,WAAAA,KAAgBE,OAAOC,KAAK1B,SAASuB,WAAY,CAAA,EAAEI;AAEhF,QAAIH,aAAa;AACfvC,eAAS;;QAEP,GAAGe,SAASuB,WAAY;QACxBlC,SAAQL,+BAAOK,WAAU;;QAEzBU,gBAAgBwB;QAChBK,MAAM;MACR,CAAA;WACK;AACL3C,eAAS;;QAEPc,gBAAgBwB;;QAEhBM,aAAa,CAAA;QACbC,YAAY,CAAA;QACZC,MAAM;QACNH,MAAM;;QAENvC,SAAQL,+BAAOK,WAAU;MAC3B,CAAA;IACF;EACF;AAEA,QAAM2C,qBAAqB,CAACC,WAAAA;AAC1BhD,aAAS;MAAE,GAAGgD;MAAQL,MAAM;IAAE,CAAA;AAC9B3B,gBAAY,CAACiC,UAAU;MACrB,GAAGA;MACH,CAACnC,cAAAA,GAAiB;QAAE,GAAGmC,KAAKnC,cAAe;QAAE,GAAGkC;MAAO;MACzD;EACF;AAEA,QAAME,oBAAoB,CAACC,eAAAA;AACzBnD,aAAS;MAAE,CAACmD,UAAAA,GAAa,CAAA;MAAIR,MAAMS;OAAa,QAAA;AAChDpC,gBAAY,CAACiC,UAAU;MAAE,GAAGA;MAAM,CAACnC,cAAAA,GAAiB,CAAA;MAAG;EACzD;AAEA,QAAMuC,yBAAgE,CAAC,EAAEP,KAAI;;IAE3EC,mBAAmB;MAAED;IAAK,CAAA;;AAG5B,QAAMQ,wBAAwBd,OAAOC,KAAKlC,gBAAgB,CAAA,CAAC;AAE3D,aACE2B,yBAACqB,QAAQC,MAAI;kBACXC,0BAACC,KAAKC,MAAI;;YACRzB,yBAACwB,KAAKE,OAAK;oBACRnE,cAAc;YACb+B,IAAI;YACJC,gBAAgB;UAClB,CAAA;;YAEFS,yBAAC2B,YAAAA;UAAWjD;UAAoBE;;YAChCoB,yBAACqB,QAAQO,SAAO;wBACdL,0BAACM,KAAKP,MAAI;YAACQ,SAAQ;YAASC,eAAe7B;YAAiB8B,OAAOpD;;kBACjE2C,0BAACU,MAAAA;gBAAKC,gBAAe;gBAAgBC,eAAe;;sBAClDZ,0BAACM,KAAKO,MAAI;oBACRC,cAAY9E,cAAc;sBACxB+B,IAAI;sBACJC,gBAAgB;oBAClB,CAAA;;0BAEAgC,0BAACM,KAAKS,SAAO;wBAACN,OAAO5E;;0BAClBG,cAAc;4BACb+B,IAAI;4BACJC,gBAAgB;0BAClB,CAAA;0BAAI;0BACHC,kBAAkB,IAAIA,gBAAgB+C,KAAKzC,WAAW0C,KAAK,MAAM;;;0BAEpEjB,0BAACM,KAAKS,SAAO;wBAACN,OAAO3E;;0BAClBE,cAAc;4BACb+B,IAAI;4BACJC,gBAAgB;0BAClB,CAAA;0BAAI;0BACHE,oBAAoB,IAAIA,kBAAkB8C,KAAKzC,WAAW0C,KAAK,MAAM;;;;;sBAI1ExC,yBAACyC,KAAAA;oBAAIC,OAAM;oBACT,cAAA1C,yBAAC2C,WAAAA;sBACCC,MAAK;sBACLC,SAAS,MAAM/E,SAAS;wBAAEI,QAAQ;wBAAIuC,MAAM;sBAAE,CAAA;sBAC9CuB,OAAOnE,+BAAOK;sBACd4E,UAAU,CAACC,MAAMjF,SAAS;wBAAEI,QAAQ6E,EAAEC,OAAOhB;wBAAOvB,MAAM;sBAAE,CAAA;sBAC5DwC,YAAY1F,cAAc;wBACxB+B,IAAI;wBACJC,gBAAgB;sBAClB,CAAA;sBACA2D,aAAa3F,cAAc;wBACzB+B,IAAI;wBACJC,gBAAgB;sBAClB,CAAA;gCAEChC,cAAc;wBACb+B,IAAI;wBACJC,gBAAgB;sBAClB,CAAA;;;;;kBAINgC,0BAACU,MAAAA;gBAAKE,eAAe;gBAAGgB,KAAK;;sBAC3BnD,yBAACoD,YAAAA;oBACCC,YAAWxF,+BAAO+C,SAAQ;oBAC1BC,oBAAoBM;;sBAEtBnB,yBAACsD,oBAAAA;oBACC1E;oBACAgB;oBACAC;oBACAhC,OAAOA,SAAS,CAAA;oBAChBgD;oBACAG;;;;kBAGJhB,yBAAC6B,KAAKD,SAAO;gBAACI,OAAO5E;gBACnB,cAAA4C,yBAACuD,iBAAAA;kBACCC,aAAahE,mDAAiBiE;kBAC9BC,QAAQhE;kBACR0B;kBACA9C;kBACAF;kBACAQ,gBAAe;kBACf+E,kBAAkBpF;kBAClBP;;;kBAGJgC,yBAAC6B,KAAKD,SAAO;gBAACI,OAAO3E;gBACnB,cAAA2C,yBAACuD,iBAAAA;kBACCC,aAAa/D,uDAAmBgE;kBAChCC,QAAQ/D;kBACRyB;kBACA9C;kBACAF;kBACAQ,gBAAe;kBACfZ;;;kBAGJuD,0BAACqC,WAAWtC,MAAI;gBAAE,GAAGxB;gBAAY+D,iBAAiB;;sBAChD7D,yBAAC4D,WAAWE,UAAQ;oBAACC,SAAS;sBAAC;sBAAM;sBAAM;sBAAM;oBAAM;;sBACvD/D,yBAAC4D,WAAWI,OAAK,CAAA,CAAA;;;kBAEnBhE,yBAACyC,KAAAA;gBAAIwB,YAAY;gBACf,cAAAjE,yBAACkE,KAAAA;kBACCC,MAAK;kBACLnB,QAAO;kBACPoB,KAAI;kBACJC,OAAO;oBAAEC,gBAAgB;kBAAO;kBAChCC,SAAS,MAAM9G,WAAW,0BAAA;kBAE1B,cAAAuC,yBAACwE,YAAAA;oBACCC,OAAOlH,cAAc;sBACnB+B,IAAI;sBACJC,gBAAgB;oBAClB,CAAA;oBACAmF,UAAUnH,cAAc;sBACtB+B,IAAI;sBACJC,gBACE;oBACJ,CAAA;oBACAoF,UAAM3E,yBAAC4E,cAAAA,CAAAA,CAAAA;oBACPC,gBAAe;oBACfC,eACE9E,yBAAC+E,eAAAA;sBACCC,MAAK;sBACLtC,OAAM;sBACNuC,QAAO;sBACPZ,OAAO;wBAAEa,YAAY;sBAAS;;;;;;;;;;;AAWpD;AAEA,IAAMC,2BAA2B,MAAA;AAC/B,QAAMC,cAAcC,iBAAiB,CAAC5G,UAAUA;;AAAAA,uBAAM6G,UAAUF,YAAYG,gBAA5B9G,mBAAyC+G;GAAAA;AAEzF,aACExF,yBAACwB,KAAKiE,SAAO;IAACL;IACZ,cAAApF,yBAAC1C,iBAAAA,CAAAA,CAAAA;;AAGP;",
  "names": ["useDebounce", "value", "delay", "debouncedValue", "setDebouncedValue", "useState", "React", "useEffect", "handler", "setTimeout", "clearTimeout", "NpmPackagesFilters", "handleSelectClear", "handleSelectChange", "npmPackageType", "possibleCategories", "possibleCollections", "query", "formatMessage", "useIntl", "handleTagRemove", "tagToRemove", "filterType", "update", "filter", "previousTag", "_jsxs", "Popover", "Root", "_jsx", "Trigger", "Button", "variant", "startIcon", "Filter", "id", "defaultMessage", "Content", "sideOffset", "Flex", "padding", "direction", "alignItems", "gap", "FilterSelect", "message", "value", "collections", "onChange", "newCollections", "onClear", "possibleFilters", "customizeContent", "values", "count", "length", "categories", "newCategories", "map", "collection", "Box", "Tag", "icon", "Cross", "onClick", "category", "MultiSelect", "data-testid", "aria-label", "placeholder", "Object", "entries", "filterName", "MultiSelectOption", "EllipsisText", "styled", "Typography", "NpmPackageCard", "npmPackage", "isInstalled", "useYarn", "isInDevelopmentMode", "npmPackageType", "strapiAppVersion", "attributes", "formatMessage", "useIntl", "trackUsage", "useTracking", "commandToCopy", "npmPackageName", "madeByStrapiMessage", "id", "defaultMessage", "npmPackageHref", "pluralize", "plural", "slug", "versionRange", "validRange", "strapiVersion", "isCompatible", "satisfies", "_jsxs", "Flex", "direction", "justifyContent", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "hasRadius", "background", "shadow", "height", "alignItems", "data-testid", "Box", "_jsx", "tag", "src", "logo", "url", "alt", "name", "width", "PackageStats", "githubStars", "npmDownloads", "variant", "gap", "validated", "madeByStrapi", "Tooltip", "description", "CheckCircle", "fill", "StrapiLogo", "textColor", "style", "alignSelf", "LinkButton", "size", "href", "isExternal", "endIcon", "ExternalLink", "aria-label", "pluginName", "onClick", "InstallPluginButton", "strapiPeerDepVersion", "toggleNotification", "useNotification", "copy", "useClipboard", "handleCopy", "didCopy", "type", "message", "Check", "color", "fontWeight", "CardButton", "installMessage", "label", "span", "Button", "startIcon", "Duplicate", "disabled", "_Fragment", "GitHub", "aria-hidden", "Star", "p", "starsCount", "package", "VerticalDivider", "Download", "downloadsCount", "Divider", "NpmPackagesGrid", "status", "npmPackages", "installedPackageNames", "useYarn", "isInDevelopmentMode", "npmPackageType", "strapiAppVersion", "debouncedSearch", "formatMessage", "useIntl", "_jsx", "Page", "Error", "Loading", "emptySearchMessage", "id", "defaultMessage", "target", "length", "_jsxs", "Box", "position", "Layouts", "Grid", "size", "Array", "fill", "map", "_", "idx", "EmptyPluginCard", "height", "hasRadius", "top", "width", "Flex", "alignItems", "justifyContent", "direction", "EmptyDocuments", "paddingTop", "Typography", "variant", "tag", "textColor", "Root", "gap", "npmPackage", "Item", "col", "s", "xs", "style", "NpmPackageCard", "isInstalled", "includes", "attributes", "npmPackageName", "styled", "theme", "colors", "neutral150", "PageHeader", "isOnline", "npmPackageType", "formatMessage", "useIntl", "trackUsage", "useTracking", "tracking", "_jsx", "Layouts", "Header", "title", "id", "defaultMessage", "subtitle", "primaryAction", "LinkButton", "startIcon", "Upload", "variant", "href", "onClick", "isExternal", "OfflineLayout", "formatMessage", "useIntl", "_jsx", "Layouts", "Root", "_jsxs", "Main", "PageHeader", "Flex", "width", "direction", "alignItems", "justifyContent", "paddingTop", "Box", "paddingBottom", "Typography", "textColor", "variant", "id", "defaultMessage", "svg", "height", "viewBox", "fill", "xmlns", "rect", "x", "y", "rx", "path", "d", "stroke", "SORT_TYPES", "selected", "id", "defaultMessage", "option", "SortSelect", "sortQuery", "handleSelectChange", "formatMessage", "useIntl", "_jsx", "SelectWrapper", "SingleSelect", "value", "customizeContent", "onChange", "sortName", "sort", "aria-label", "size", "Object", "entries", "map", "messages", "SingleSelectOption", "styled", "Box", "theme", "fontWeights", "semiBold", "fontSizes", "MARKETPLACE_API_URL", "useMarketplaceData", "npmPackageType", "debouncedSearch", "query", "tabQuery", "strapiVersion", "notifyStatus", "useNotifyAT", "formatMessage", "useIntl", "toggleNotification", "useNotification", "marketplaceTitle", "id", "defaultMessage", "notifyMarketplaceLoad", "target", "paginationParams", "page", "pageSize", "pluginParams", "plugin", "pagination", "search", "version", "data", "pluginsResponse", "status", "pluginsStatus", "useQuery", "queryString", "stringify", "res", "fetch", "ok", "Error", "json", "error", "onSuccess", "onError", "type", "message", "providerParams", "provider", "providersResponse", "providersStatus", "npmPackageTypeResponse", "possibleCollections", "meta", "collections", "possibleCategories", "categories", "useNavigatorOnline", "onlineStatus", "navigator", "onLine", "isOnline", "setIsOnline", "useState", "setOnline", "setOffline", "React", "useEffect", "window", "addEventListener", "removeEventListener", "PLUGIN", "PROVIDER", "MarketplacePage", "formatMessage", "useIntl", "trackUsage", "useTracking", "toggleNotification", "useNotification", "query", "setQuery", "useQueryParams", "debouncedSearch", "useDebounce", "search", "autoReload", "isInDevelopmentMode", "dependencies", "useYarn", "strapiVersion", "useAppInfo", "state", "isOnline", "useNavigatorOnline", "npmPackageType", "tabQuery", "setTabQuery", "useState", "plugin", "provider", "React", "useEffect", "type", "message", "id", "defaultMessage", "pluginsResponse", "providersResponse", "pluginsStatus", "providersStatus", "possibleCollections", "possibleCategories", "pagination", "useMarketplaceData", "_jsx", "OfflineLayout", "handleTabChange", "tab", "selectedTab", "hasTabQuery", "Object", "keys", "length", "page", "collections", "categories", "sort", "handleSelectChange", "update", "prev", "handleSelectClear", "filterType", "undefined", "handleSortSelectChange", "installedPackageNames", "Layouts", "Root", "_jsxs", "Page", "Main", "Title", "PageHeader", "Content", "Tabs", "variant", "onValueChange", "value", "Flex", "justifyContent", "paddingBottom", "List", "aria-label", "Trigger", "meta", "total", "Box", "width", "Searchbar", "name", "onClear", "onChange", "e", "target", "clearLabel", "placeholder", "gap", "SortSelect", "sortQuery", "NpmPackagesFilters", "NpmPackagesGrid", "npmPackages", "data", "status", "strapiAppVersion", "Pagination", "defaultPageSize", "PageSize", "options", "Links", "paddingTop", "a", "href", "rel", "style", "textDecoration", "onClick", "ContentBox", "title", "subtitle", "icon", "GlassesSquare", "iconBackground", "endAction", "ExternalLink", "fill", "height", "marginLeft", "ProtectedMarketplacePage", "permissions", "useTypedSelector", "admin_app", "marketplace", "main", "Protect"]
}
