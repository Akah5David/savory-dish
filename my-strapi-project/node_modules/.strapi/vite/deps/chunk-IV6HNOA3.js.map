{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/pages/Settings/components/Tokens/FormHead.tsx", "../../../@strapi/admin/admin/src/pages/Settings/components/Tokens/TokenBox.tsx", "../../../@strapi/admin/admin/src/utils/locales.ts", "../../../@strapi/admin/admin/src/pages/Settings/pages/ApiTokens/EditView/utils/getDateOfExpiration.ts", "../../../@strapi/admin/admin/src/pages/Settings/utils/forms.ts", "../../../@strapi/admin/admin/src/pages/Settings/components/Tokens/LifeSpanInput.tsx", "../../../@strapi/admin/admin/src/pages/Settings/components/Tokens/TokenDescription.tsx", "../../../@strapi/admin/admin/src/pages/Settings/components/Tokens/TokenName.tsx", "../../../@strapi/admin/admin/src/pages/Settings/components/Tokens/TokenTypeSelect.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Button, Dialog, Flex, Tooltip } from '@strapi/design-system';\nimport { Check, ArrowClockwise, Eye, EyeStriked } from '@strapi/icons';\nimport { MessageDescriptor, useIntl } from 'react-intl';\n\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\nimport { tours } from '../../../../components/GuidedTour/Tours';\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { BackButton } from '../../../../features/BackButton';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { useRegenerateTokenMutation } from '../../../../services/transferTokens';\n\nimport type { Data } from '@strapi/types';\n\ninterface RegenerateProps {\n  onRegenerate?: (newKey: string) => void;\n  url: string;\n}\n\nconst Regenerate = ({ onRegenerate, url }: RegenerateProps) => {\n  const { formatMessage } = useIntl();\n  const [showConfirmDialog, setShowConfirmDialog] = React.useState(false);\n\n  const [isLoadingConfirmation, setIsLoadingConfirmation] = React.useState(false);\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const [regenerateToken] = useRegenerateTokenMutation();\n\n  const regenerateData = async () => {\n    try {\n      const res = await regenerateToken(url);\n\n      if ('error' in res) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n\n        return;\n      }\n\n      if (onRegenerate) {\n        onRegenerate(res.data.accessKey);\n      }\n    } catch (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'Something went wrong',\n        }),\n      });\n    } finally {\n      setIsLoadingConfirmation(false);\n    }\n  };\n\n  const handleConfirmRegeneration = async () => {\n    regenerateData();\n    setShowConfirmDialog(false);\n  };\n\n  return (\n    <Dialog.Root open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n      <Dialog.Trigger>\n        <Button\n          startIcon={<ArrowClockwise />}\n          type=\"button\"\n          size=\"S\"\n          variant=\"tertiary\"\n          onClick={() => setShowConfirmDialog(true)}\n          name=\"regenerate\"\n        >\n          {formatMessage({\n            id: 'Settings.tokens.regenerate',\n            defaultMessage: 'Regenerate',\n          })}\n        </Button>\n      </Dialog.Trigger>\n\n      <ConfirmDialog\n        title={formatMessage({\n          id: 'Settings.tokens.RegenerateDialog.title',\n          defaultMessage: 'Regenerate token',\n        })}\n        endAction={\n          <Button\n            startIcon={<ArrowClockwise />}\n            loading={isLoadingConfirmation}\n            onClick={handleConfirmRegeneration}\n          >\n            {formatMessage({\n              id: 'Settings.tokens.Button.regenerate',\n              defaultMessage: 'Regenerate',\n            })}\n          </Button>\n        }\n      >\n        {formatMessage({\n          id: 'Settings.tokens.popUpWarning.message',\n          defaultMessage: 'Are you sure you want to regenerate this token?',\n        })}\n      </ConfirmDialog>\n    </Dialog.Root>\n  );\n};\n\ninterface Token {\n  id: Data.ID;\n  name: string;\n}\n\ninterface FormHeadProps<TToken extends Token | null> {\n  title: MessageDescriptor;\n  token: TToken;\n  canEditInputs: boolean;\n  canRegenerate: boolean;\n  canShowToken?: boolean;\n  setToken: (token: TToken) => void;\n  toggleToken?: () => void;\n  showToken?: boolean;\n  isSubmitting: boolean;\n  regenerateUrl: string;\n}\n\nexport const FormHead = <TToken extends Token | null>({\n  title,\n  token,\n  setToken,\n  toggleToken,\n  showToken,\n  canShowToken,\n  canEditInputs,\n  canRegenerate,\n  isSubmitting,\n  regenerateUrl,\n}: FormHeadProps<TToken>) => {\n  const { formatMessage } = useIntl();\n  const handleRegenerate = (newKey: string) => {\n    setToken({\n      ...token,\n      accessKey: newKey,\n    });\n    toggleToken?.();\n  };\n\n  return (\n    <Layouts.Header\n      title={token?.name || formatMessage(title)}\n      primaryAction={\n        canEditInputs ? (\n          <Flex gap={2}>\n            {canRegenerate && token?.id && (\n              <Regenerate\n                onRegenerate={handleRegenerate}\n                url={`${regenerateUrl}${token?.id ?? ''}`}\n              />\n            )}\n            {token?.id && toggleToken && (\n              <tours.apiTokens.ViewAPIToken>\n                <Tooltip\n                  label={\n                    !canShowToken &&\n                    formatMessage({\n                      id: 'Settings.tokens.encryptionKeyMissing',\n                      defaultMessage:\n                        'In order to view the token, you need a valid encryption key in the admin configuration',\n                    })\n                  }\n                >\n                  <Button\n                    type=\"button\"\n                    startIcon={showToken ? <EyeStriked /> : <Eye />}\n                    variant=\"secondary\"\n                    onClick={() => toggleToken?.()}\n                    disabled={!canShowToken}\n                  >\n                    {formatMessage({\n                      id: 'Settings.tokens.viewToken',\n                      defaultMessage: 'View token',\n                    })}\n                  </Button>\n                </Tooltip>\n              </tours.apiTokens.ViewAPIToken>\n            )}\n            <Button\n              disabled={isSubmitting}\n              loading={isSubmitting}\n              startIcon={<Check />}\n              type=\"submit\"\n              size=\"S\"\n            >\n              {formatMessage({\n                id: 'global.save',\n                defaultMessage: 'Save',\n              })}\n            </Button>\n          </Flex>\n        ) : (\n          canRegenerate &&\n          token?.id && (\n            <Regenerate\n              onRegenerate={handleRegenerate}\n              url={`${regenerateUrl}${token?.id ?? ''}`}\n            />\n          )\n        )\n      }\n      navigationAction={<BackButton />}\n      ellipsis\n    />\n  );\n};\n", "import * as React from 'react';\n\nimport { IconButton, Flex, Box, Typography, Button } from '@strapi/design-system';\nimport { Duplicate, Key } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { ContentBox } from '../../../../components/ContentBox';\nimport { useGuidedTour } from '../../../../components/GuidedTour/Context';\nimport { tours } from '../../../../components/GuidedTour/Tours';\nimport { GUIDED_TOUR_REQUIRED_ACTIONS } from '../../../../components/GuidedTour/utils/constants';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useTracking } from '../../../../features/Tracking';\nimport { useClipboard } from '../../../../hooks/useClipboard';\n\ninterface TokenBoxProps {\n  token?: string;\n  tokenType: 'transfer-token' | 'api-token';\n}\n\nconst TypographyWordBreak = styled(Typography)`\n  word-break: break-all;\n`;\n\nexport const ApiTokenBox = ({ token, tokenType }: TokenBoxProps) => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { trackUsage } = useTracking();\n  const dispatch = useGuidedTour('TokenBox', (s) => s.dispatch);\n\n  const { copy } = useClipboard();\n\n  const handleCopyToken = async (token: TokenBoxProps['token']) => {\n    if (token) {\n      const didCopy = await copy(token);\n\n      if (didCopy) {\n        trackUsage('didCopyTokenKey', {\n          tokenType,\n        });\n        dispatch({\n          type: 'set_completed_actions',\n          payload: [GUIDED_TOUR_REQUIRED_ACTIONS.apiTokens.copyToken],\n        });\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'Settings.tokens.notification.copied' }),\n        });\n      }\n    }\n  };\n\n  return (\n    <>\n      <Flex\n        shadow=\"tableShadow\"\n        direction=\"column\"\n        alignItems=\"start\"\n        hasRadius\n        padding={6}\n        background=\"neutral0\"\n      >\n        <Flex direction=\"column\" alignItems=\"start\" gap={1} paddingBottom={4}>\n          <Typography fontWeight=\"bold\">\n            {formatMessage({\n              id: 'Settings.tokens.copy.title',\n              defaultMessage: 'Token',\n            })}\n          </Typography>\n          <Typography>\n            {formatMessage({\n              id: 'Settings.apiTokens.copy.lastWarning',\n              defaultMessage: 'Copy your API token',\n            })}\n          </Typography>\n        </Flex>\n        <Box background=\"neutral100\" hasRadius padding={2} borderColor=\"neutral150\">\n          <TypographyWordBreak fontWeight=\"semiBold\" variant=\"pi\">\n            {token}\n          </TypographyWordBreak>\n        </Box>\n        <tours.apiTokens.CopyAPIToken>\n          <Button\n            startIcon={<Duplicate />}\n            variant=\"secondary\"\n            onClick={(e: React.MouseEvent) => {\n              e.preventDefault();\n              handleCopyToken(token);\n            }}\n            marginTop={6}\n          >\n            {formatMessage({ id: 'Settings.tokens.copy.copy', defaultMessage: 'Copy' })}\n          </Button>\n        </tours.apiTokens.CopyAPIToken>\n      </Flex>\n    </>\n  );\n};\n\nexport const TokenBox = ({ token, tokenType }: TokenBoxProps) => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { trackUsage } = useTracking();\n\n  const { copy } = useClipboard();\n\n  const handleClick = (token: TokenBoxProps['token']) => async () => {\n    if (token) {\n      const didCopy = await copy(token);\n\n      if (didCopy) {\n        trackUsage('didCopyTokenKey', {\n          tokenType,\n        });\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'Settings.tokens.notification.copied' }),\n        });\n      }\n    }\n  };\n\n  return (\n    <ContentBox\n      endAction={\n        token && (\n          <span style={{ alignSelf: 'start' }}>\n            <IconButton\n              label={formatMessage({\n                id: 'app.component.CopyToClipboard.label',\n                defaultMessage: 'Copy to clipboard',\n              })}\n              onClick={handleClick(token)}\n              variant=\"ghost\"\n              type=\"button\"\n              style={{ padding: 0, height: '1.6rem' }}\n            >\n              <Duplicate />\n            </IconButton>\n          </span>\n        )\n      }\n      title={\n        token ||\n        formatMessage({\n          id: 'Settings.tokens.copy.editTitle',\n          defaultMessage: 'This token isn’t accessible anymore.',\n        })\n      }\n      subtitle={\n        token\n          ? formatMessage(\n              tokenType === 'api-token'\n                ? {\n                    id: 'Settings.tokens.copy.subtitle',\n                    defaultMessage: 'Copy this token for use elsewhere',\n                  }\n                : {\n                    id: 'Settings.tokens.copy.lastWarning',\n                    defaultMessage:\n                      'Make sure to copy this token, you won’t be able to see it again!',\n                  }\n            )\n          : formatMessage({\n              id: 'Settings.tokens.copy.editMessage',\n              defaultMessage: 'For security reasons, you can only see your token once.',\n            })\n      }\n      icon={<Key />}\n      iconBackground=\"neutral100\"\n    />\n  );\n};\n", "import * as locales from 'date-fns/locale';\n\ntype LocaleName = keyof typeof locales;\n\n/**\n * Returns a valid date-fns locale name from a Strapi Admin locale.\n * Defaults to 'enUS' if the locale is not found.\n */\nconst getDateFnsLocaleName = (locale: string): LocaleName => {\n  if (Object.keys(locales).includes(locale)) {\n    return locale as LocaleName;\n  }\n\n  return 'enUS';\n};\n\nexport { getDateFnsLocaleName };\n", "import { addDays, format } from 'date-fns';\nimport * as locales from 'date-fns/locale';\n\nimport { getDateFnsLocaleName } from '../../../../../../utils/locales';\n\nexport const getDateOfExpiration = (\n  createdAt: string,\n  duration: number | null,\n  language: string = 'en'\n) => {\n  if (duration && typeof duration === 'number') {\n    const durationInDays = duration / 24 / 60 / 60 / 1000;\n\n    return format(addDays(new Date(createdAt), durationInDays), 'PPP', {\n      locale: locales[getDateFnsLocaleName(language)],\n    });\n  }\n\n  return 'Unlimited';\n};\n", "import { MessageDescriptor } from 'react-intl';\n\nconst isErrorMessageMessageDescriptor = (\n  message: string | MessageDescriptor\n): message is MessageDescriptor => {\n  return typeof message === 'object' && message !== null && 'id' in message;\n};\n\nexport { isErrorMessageMessageDescriptor };\n", "import { SingleSelectOption, SingleSelect, Typography, Field } from '@strapi/design-system';\nimport { MessageDescriptor, useIntl } from 'react-intl';\n\nimport { getDateOfExpiration } from '../../pages/ApiTokens/EditView/utils/getDateOfExpiration';\nimport { isErrorMessageMessageDescriptor } from '../../utils/forms';\n\nimport type { ApiToken } from '../../../../../../shared/contracts/api-token';\nimport type { TransferToken } from '../../../../../../shared/contracts/transfer';\n\ninterface LifeSpanInputProps {\n  error?: string | MessageDescriptor;\n  value?: string | number | null;\n  onChange: (event: { target: { name: string; value: string } }) => void;\n  isCreating: boolean;\n  token: Partial<TransferToken> | Partial<ApiToken> | null;\n}\n\nexport const LifeSpanInput = ({\n  token,\n  error,\n  value,\n  onChange,\n  isCreating,\n}: LifeSpanInputProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <>\n      <Field.Root\n        error={\n          error\n            ? formatMessage(\n                isErrorMessageMessageDescriptor(error)\n                  ? error\n                  : { id: error, defaultMessage: error }\n              )\n            : undefined\n        }\n        name=\"lifespan\"\n        required\n      >\n        <Field.Label>\n          {formatMessage({\n            id: 'Settings.tokens.form.duration',\n            defaultMessage: 'Token duration',\n          })}\n        </Field.Label>\n        <SingleSelect\n          value={value}\n          onChange={(value) => {\n            // @ts-expect-error – DS v2 won't support number types for select\n            onChange({ target: { name: 'lifespan', value } });\n          }}\n          disabled={!isCreating}\n          placeholder=\"Select\"\n        >\n          <SingleSelectOption value=\"604800000\">\n            {formatMessage({\n              id: 'Settings.tokens.duration.7-days',\n              defaultMessage: '7 days',\n            })}\n          </SingleSelectOption>\n          <SingleSelectOption value=\"2592000000\">\n            {formatMessage({\n              id: 'Settings.tokens.duration.30-days',\n              defaultMessage: '30 days',\n            })}\n          </SingleSelectOption>\n          <SingleSelectOption value=\"7776000000\">\n            {formatMessage({\n              id: 'Settings.tokens.duration.90-days',\n              defaultMessage: '90 days',\n            })}\n          </SingleSelectOption>\n          <SingleSelectOption value=\"0\">\n            {formatMessage({\n              id: 'Settings.tokens.duration.unlimited',\n              defaultMessage: 'Unlimited',\n            })}\n          </SingleSelectOption>\n        </SingleSelect>\n        <Field.Error />\n      </Field.Root>\n      <Typography variant=\"pi\" textColor=\"neutral600\">\n        {!isCreating &&\n          `${formatMessage({\n            id: 'Settings.tokens.duration.expiration-date',\n            defaultMessage: 'Expiration date',\n            // @ts-expect-error – TODO: fix this.\n          })}: ${getDateOfExpiration(token?.createdAt, parseInt(value ?? '', 10))}`}\n      </Typography>\n    </>\n  );\n};\n", "import { Field, Textarea, TextareaProps } from '@strapi/design-system';\nimport { MessageDescriptor, useIntl } from 'react-intl';\n\nimport { isErrorMessageMessageDescriptor } from '../../utils/forms';\n\ninterface TokenDescriptionProps extends Pick<TextareaProps, 'onChange' | 'value'> {\n  error?: string | MessageDescriptor;\n  canEditInputs: boolean;\n}\n\nexport const TokenDescription = ({\n  error,\n  value,\n  onChange,\n  canEditInputs,\n}: TokenDescriptionProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Field.Root\n      name=\"description\"\n      error={\n        error\n          ? formatMessage(\n              isErrorMessageMessageDescriptor(error)\n                ? error\n                : {\n                    id: error,\n                    defaultMessage: error,\n                  }\n            )\n          : undefined\n      }\n    >\n      <Field.Label>\n        {formatMessage({\n          id: 'Settings.tokens.form.description',\n          defaultMessage: 'Description',\n        })}\n      </Field.Label>\n      <Textarea onChange={onChange} disabled={!canEditInputs} value={value} />\n      <Field.Error />\n    </Field.Root>\n  );\n};\n", "import { Field, TextInput, TextInputProps } from '@strapi/design-system';\nimport { MessageDescriptor, useIntl } from 'react-intl';\n\nimport { isErrorMessageMessageDescriptor } from '../../utils/forms';\n\ninterface TokenNameProps extends Pick<TextInputProps, 'onChange' | 'value'> {\n  error?: string | MessageDescriptor;\n  canEditInputs: boolean;\n}\n\nexport const TokenName = ({ error, value, onChange, canEditInputs }: TokenNameProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Field.Root\n      name=\"name\"\n      error={\n        error\n          ? formatMessage(\n              isErrorMessageMessageDescriptor(error) ? error : { id: error, defaultMessage: error }\n            )\n          : undefined\n      }\n      required\n    >\n      <Field.Label>\n        {formatMessage({\n          id: 'Settings.tokens.form.name',\n          defaultMessage: 'Name',\n        })}\n      </Field.Label>\n      <TextInput onChange={onChange} value={value} disabled={!canEditInputs} />\n      <Field.Error />\n    </Field.Root>\n  );\n};\n", "import { SingleSelectOption, SingleSelect, SingleSelectProps, Field } from '@strapi/design-system';\nimport { MessageDescriptor, useIntl } from 'react-intl';\n\nimport { isErrorMessageMessageDescriptor } from '../../utils/forms';\n\ninterface TokenTypeSelectProps extends Pick<SingleSelectProps, 'onChange' | 'value'> {\n  name?: string;\n  options: Array<{\n    label: MessageDescriptor;\n    value: string;\n  }>;\n  error?: string | MessageDescriptor;\n  canEditInputs: boolean;\n  label: MessageDescriptor;\n}\n\nexport const TokenTypeSelect = ({\n  name = 'type',\n  error,\n  value,\n  onChange,\n  canEditInputs,\n  options = [],\n  label,\n}: TokenTypeSelectProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Field.Root\n      error={\n        error\n          ? formatMessage(\n              isErrorMessageMessageDescriptor(error) ? error : { id: error, defaultMessage: error }\n            )\n          : undefined\n      }\n      name={name}\n      required\n    >\n      <Field.Label>\n        {formatMessage({\n          id: label.id,\n          defaultMessage: label.defaultMessage,\n        })}\n      </Field.Label>\n      <SingleSelect\n        value={value}\n        onChange={onChange}\n        placeholder=\"Select\"\n        disabled={!canEditInputs}\n      >\n        {options &&\n          options.map(({ value, label }) => (\n            <SingleSelectOption key={value} value={value}>\n              {formatMessage(label)}\n            </SingleSelectOption>\n          ))}\n      </SingleSelect>\n      <Field.Error />\n    </Field.Root>\n  );\n};\n"],
  "mappings": "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",
  "names": ["Regenerate", "onRegenerate", "url", "formatMessage", "useIntl", "showConfirmDialog", "setShowConfirmDialog", "useState", "isLoadingConfirmation", "setIsLoadingConfirmation", "toggleNotification", "useNotification", "_unstableFormatAPIError", "formatAPIError", "useAPIErrorHandler", "regenerateToken", "useRegenerateTokenMutation", "regenerateData", "res", "type", "message", "error", "data", "accessKey", "id", "defaultMessage", "handleConfirmRegeneration", "_jsxs", "Dialog", "Root", "open", "onOpenChange", "_jsx", "Trigger", "Button", "startIcon", "ArrowClockwise", "size", "variant", "onClick", "name", "ConfirmDialog", "title", "endAction", "loading", "FormHead", "token", "setToken", "toggleToken", "showToken", "canShowToken", "canEditInputs", "canRegenerate", "isSubmitting", "regenerateUrl", "handleRegenerate", "newKey", "Layouts", "Header", "primaryAction", "Flex", "gap", "tours", "apiTokens", "ViewAPIToken", "Tooltip", "label", "EyeStriked", "Eye", "disabled", "Check", "navigationAction", "BackButton", "ellipsis", "TypographyWordBreak", "styled", "Typography", "ApiTokenBox", "token", "tokenType", "formatMessage", "useIntl", "toggleNotification", "useNotification", "trackUsage", "useTracking", "dispatch", "useGuidedTour", "s", "copy", "useClipboard", "handleCopyToken", "didCopy", "type", "payload", "GUIDED_TOUR_REQUIRED_ACTIONS", "apiTokens", "copyToken", "message", "id", "_jsx", "_Fragment", "_jsxs", "Flex", "shadow", "direction", "alignItems", "hasRadius", "padding", "background", "gap", "paddingBottom", "fontWeight", "defaultMessage", "Box", "borderColor", "variant", "tours", "CopyAPIToken", "Button", "startIcon", "Duplicate", "onClick", "e", "preventDefault", "marginTop", "TokenBox", "handleClick", "ContentBox", "endAction", "span", "style", "alignSelf", "IconButton", "label", "height", "title", "subtitle", "icon", "Key", "iconBackground", "getDateFnsLocaleName", "locale", "Object", "keys", "locales", "includes", "getDateOfExpiration", "createdAt", "duration", "language", "durationInDays", "format", "addDays", "Date", "locale", "locales", "getDateFnsLocaleName", "isErrorMessageMessageDescriptor", "message", "LifeSpanInput", "token", "error", "value", "onChange", "isCreating", "formatMessage", "useIntl", "_jsxs", "_Fragment", "Field", "Root", "isErrorMessageMessageDescriptor", "id", "defaultMessage", "undefined", "name", "required", "_jsx", "Label", "SingleSelect", "target", "disabled", "placeholder", "SingleSelectOption", "Error", "Typography", "variant", "textColor", "getDateOfExpiration", "createdAt", "parseInt", "TokenDescription", "error", "value", "onChange", "canEditInputs", "formatMessage", "useIntl", "_jsxs", "Field", "Root", "name", "isErrorMessageMessageDescriptor", "id", "defaultMessage", "undefined", "_jsx", "Label", "Textarea", "disabled", "Error", "TokenName", "error", "value", "onChange", "canEditInputs", "formatMessage", "useIntl", "_jsxs", "Field", "Root", "name", "isErrorMessageMessageDescriptor", "id", "defaultMessage", "undefined", "required", "_jsx", "Label", "TextInput", "disabled", "Error", "TokenTypeSelect", "name", "error", "value", "onChange", "canEditInputs", "options", "label", "formatMessage", "useIntl", "_jsxs", "Field", "Root", "isErrorMessageMessageDescriptor", "id", "defaultMessage", "undefined", "required", "_jsx", "Label", "SingleSelect", "placeholder", "disabled", "map", "SingleSelectOption", "Error"]
}
