import {
  ConfigurationForm,
  TEMP_FIELD_NAME
} from "./chunk-TRSNFAC7.js";
import "./chunk-J4IVQWCT.js";
import "./chunk-25ZR4HQ4.js";
import {
  useTypedSelector
} from "./chunk-6S5OVYRH.js";
import "./chunk-OM2DHNO6.js";
import {
  setIn,
  useDoc,
  useDocLayout,
  useGetInitialDataQuery,
  useUpdateContentTypeConfigurationMutation
} from "./chunk-PC7CXYGN.js";
import "./chunk-QTDINVTV.js";
import "./chunk-HIZVCZYI.js";
import "./chunk-CTJEZX42.js";
import "./chunk-53POI7IS.js";
import "./chunk-QEQLI7DQ.js";
import "./chunk-ZBPTG6SW.js";
import "./chunk-VEVUEJ32.js";
import "./chunk-K3TVLHAL.js";
import "./chunk-6ASYCMUH.js";
import "./chunk-PK3ZFZKA.js";
import "./chunk-IO3VP5IE.js";
import "./chunk-AHBVW64Z.js";
import "./chunk-QIJGNK42.js";
import "./chunk-K5YL2QBO.js";
import "./chunk-UXWTFPOA.js";
import "./chunk-XK24IEHQ.js";
import "./chunk-HDTECTWR.js";
import "./chunk-3BE3O3AO.js";
import "./chunk-S3YW2S6K.js";
import "./chunk-77H66RLC.js";
import "./chunk-2CLYA3EW.js";
import "./chunk-ZKHXEW4O.js";
import "./chunk-3DRZIGZ7.js";
import "./chunk-AXWXT77Z.js";
import "./chunk-BERSGFTW.js";
import "./chunk-4RP25Z52.js";
import "./chunk-UXF74U5H.js";
import "./chunk-FA4S65BC.js";
import "./chunk-QNNEQYNF.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-JBETOYCV.js";
import "./chunk-K65KIEAL.js";
import "./chunk-SBDL6J4T.js";
import "./chunk-6QBME3X6.js";
import "./chunk-57WDCADH.js";
import "./chunk-NZYVKQYR.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-XUB42PRF.js";
import "./chunk-EGNP2T5O.js";
import "./chunk-DFNLSM7R.js";
import "./chunk-J3VX4TLS.js";
import {
  useTracking
} from "./chunk-SWMKW6KW.js";
import "./chunk-EYPLXPYB.js";
import "./chunk-GMP26IAR.js";
import "./chunk-HYAPEEEA.js";
import "./chunk-YXDCVYVT.js";
import "./chunk-PQINNV4N.js";
import "./chunk-VYSYYPOB.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-E6226V6Q.js";
import "./chunk-HOFXRYRB.js";
import "./chunk-6CNXZWKV.js";
import {
  useNotification
} from "./chunk-DU5PMQGH.js";
import "./chunk-3P6TVZEI.js";
import "./chunk-MQTX2EPM.js";
import "./chunk-XIWU657M.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-HQK34MOW.js";
import "./chunk-ROXOEY4R.js";
import "./chunk-CE4VABH2.js";
import "./chunk-QOUV5O5E.js";
import "./chunk-EA7PLESO.js";
import {
  useIntl
} from "./chunk-W7N7G5WV.js";
import "./chunk-5ZC4PE57.js";
import "./chunk-S65ZWNEO.js";
import "./chunk-FOD4ENRR.js";
import "./chunk-VG5GJPFG.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import "./chunk-3CQBCJ3G.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/content-manager/dist/admin/pages/EditConfigurationPage.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var EditConfigurationPage = () => {
  const { trackUsage } = useTracking();
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();
  const { isLoading: isLoadingSchema, schema, model } = useDoc();
  const { isLoading: isLoadingLayout, error, list, edit } = useDocLayout();
  const { fieldSizes, error: errorFieldSizes, isLoading: isLoadingFieldSizes, isFetching: isFetchingFieldSizes } = useGetInitialDataQuery(void 0, {
    selectFromResult: (res) => {
      var _a;
      const fieldSizes2 = Object.entries(((_a = res.data) == null ? void 0 : _a.fieldSizes) ?? {}).reduce((acc, [attributeName, { default: size }]) => {
        acc[attributeName] = size;
        return acc;
      }, {});
      return {
        isFetching: res.isFetching,
        isLoading: res.isLoading,
        error: res.error,
        fieldSizes: fieldSizes2
      };
    }
  });
  React.useEffect(() => {
    if (errorFieldSizes) {
      toggleNotification({
        type: "danger",
        message: formatAPIError(errorFieldSizes)
      });
    }
  }, [
    errorFieldSizes,
    formatAPIError,
    toggleNotification
  ]);
  const isLoading = isLoadingSchema || isLoadingLayout || isLoadingFieldSizes || isFetchingFieldSizes;
  const [updateConfiguration] = useUpdateContentTypeConfigurationMutation();
  const handleSubmit = async (data) => {
    try {
      trackUsage("willSaveContentTypeLayout");
      const meta = Object.entries(list.metadatas).reduce((acc, [name, { mainField: _mainField, ...listMeta }]) => {
        const existingEditMeta = edit.metadatas[name];
        const { __temp_key__, size: _size, name: _name, ...editedMetadata } = data.layout.flatMap((row) => row.children).find((field) => field.name === name) ?? {};
        acc[name] = {
          edit: {
            ...existingEditMeta,
            ...editedMetadata
          },
          list: listMeta
        };
        return acc;
      }, {});
      const res = await updateConfiguration({
        layouts: {
          edit: data.layout.map((row) => row.children.reduce((acc, { name, size }) => {
            if (name !== TEMP_FIELD_NAME) {
              return [
                ...acc,
                {
                  name,
                  size
                }
              ];
            }
            return acc;
          }, [])),
          list: list.layout.map((field) => field.name)
        },
        settings: setIn(data.settings, "displayName", void 0),
        metadatas: meta,
        uid: model
      });
      if ("data" in res) {
        trackUsage("didEditEditSettings");
        toggleNotification({
          type: "success",
          message: formatMessage({
            id: "notification.success.saved",
            defaultMessage: "Saved"
          })
        });
      } else {
        toggleNotification({
          type: "danger",
          message: formatAPIError(res.error)
        });
      }
    } catch {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error",
          defaultMessage: "An error occurred"
        })
      });
    }
  };
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  if (errorFieldSizes || error || !schema) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [
      (0, import_jsx_runtime.jsx)(Page.Title, {
        children: `Configure ${edit.settings.displayName} Edit View`
      }),
      (0, import_jsx_runtime.jsx)(ConfigurationForm, {
        onSubmit: handleSubmit,
        attributes: schema.attributes,
        fieldSizes,
        layout: edit
      })
    ]
  });
};
var ProtectedEditConfigurationPage = () => {
  const permissions = useTypedSelector((state) => {
    var _a;
    return (_a = state.admin_app.permissions.contentManager) == null ? void 0 : _a.collectionTypesConfigurations;
  });
  return (0, import_jsx_runtime.jsx)(Page.Protect, {
    permissions,
    children: (0, import_jsx_runtime.jsx)(EditConfigurationPage, {})
  });
};
export {
  EditConfigurationPage,
  ProtectedEditConfigurationPage
};
//# sourceMappingURL=EditConfigurationPage-VGA7JLUA.js.map
