import {
  RelativeTime,
  getBadgeProps
} from "./chunk-CHQYI5LG.js";
import "./chunk-OFOPFT4M.js";
import "./chunk-EBVWQ5LF.js";
import "./chunk-ZUMMFT2K.js";
import "./chunk-CTJEZX42.js";
import "./chunk-53POI7IS.js";
import "./chunk-QEQLI7DQ.js";
import "./chunk-ZBPTG6SW.js";
import "./chunk-VEVUEJ32.js";
import "./chunk-C7H2BX76.js";
import "./chunk-K3TVLHAL.js";
import {
  Widget
} from "./chunk-6ASYCMUH.js";
import "./chunk-PK3ZFZKA.js";
import "./chunk-TSLJUNC3.js";
import "./chunk-IO3VP5IE.js";
import "./chunk-AHBVW64Z.js";
import "./chunk-QIJGNK42.js";
import "./chunk-K5YL2QBO.js";
import "./chunk-UXWTFPOA.js";
import "./chunk-XK24IEHQ.js";
import "./chunk-HDTECTWR.js";
import "./chunk-3BE3O3AO.js";
import "./chunk-S3YW2S6K.js";
import "./chunk-77H66RLC.js";
import "./chunk-2CLYA3EW.js";
import "./chunk-ZKHXEW4O.js";
import "./chunk-3DRZIGZ7.js";
import "./chunk-AXWXT77Z.js";
import "./chunk-BERSGFTW.js";
import "./chunk-4RP25Z52.js";
import "./chunk-UXF74U5H.js";
import "./chunk-FA4S65BC.js";
import "./chunk-QNNEQYNF.js";
import "./chunk-6B35QAMP.js";
import "./chunk-KZSSMEWY.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-JBETOYCV.js";
import "./chunk-K65KIEAL.js";
import "./chunk-SBDL6J4T.js";
import "./chunk-6QBME3X6.js";
import "./chunk-57WDCADH.js";
import "./chunk-NZYVKQYR.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-XUB42PRF.js";
import "./chunk-EGNP2T5O.js";
import "./chunk-DFNLSM7R.js";
import "./chunk-J3VX4TLS.js";
import {
  useTracking
} from "./chunk-SWMKW6KW.js";
import "./chunk-EYPLXPYB.js";
import "./chunk-GMP26IAR.js";
import "./chunk-HYAPEEEA.js";
import "./chunk-YXDCVYVT.js";
import "./chunk-PQINNV4N.js";
import "./chunk-VYSYYPOB.js";
import "./chunk-E6226V6Q.js";
import "./chunk-HOFXRYRB.js";
import "./chunk-6CNXZWKV.js";
import "./chunk-DU5PMQGH.js";
import {
  adminApi
} from "./chunk-3P6TVZEI.js";
import "./chunk-MQTX2EPM.js";
import "./chunk-XIWU657M.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-HQK34MOW.js";
import "./chunk-ROXOEY4R.js";
import "./chunk-CE4VABH2.js";
import "./chunk-QOUV5O5E.js";
import {
  Badge,
  Box,
  IconButton,
  Table,
  Tbody,
  Td,
  Tr,
  Typography
} from "./chunk-EA7PLESO.js";
import {
  useIntl
} from "./chunk-W7N7G5WV.js";
import "./chunk-5ZC4PE57.js";
import {
  Link,
  useNavigate
} from "./chunk-S65ZWNEO.js";
import "./chunk-FOD4ENRR.js";
import {
  ForwardRef$1z
} from "./chunk-VG5GJPFG.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import {
  dt
} from "./chunk-3CQBCJ3G.js";
import "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/content-releases/dist/admin/components/Widgets.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);

// node_modules/@strapi/content-releases/dist/admin/services/homepage.mjs
var contentManagerApi = adminApi.enhanceEndpoints({
  addTagTypes: [
    "UpcomingReleasesList"
  ]
}).injectEndpoints({
  endpoints: (builder) => ({
    getUpcomingReleases: builder.query({
      query: () => "/content-releases/homepage/upcoming-releases",
      transformResponse: (response) => response.data,
      providesTags: (_, _err) => [
        "UpcomingReleasesList"
      ]
    })
  }),
  overrideExisting: true
});
var { useGetUpcomingReleasesQuery } = contentManagerApi;

// node_modules/@strapi/content-releases/dist/admin/components/Widgets.mjs
var CellTypography = dt(Typography)`
  display: block;
  max-width: 14.4rem;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
var ReleasesTable = ({ items }) => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const navigate = useNavigate();
  const getEditViewLink = (item) => {
    return `/plugins/content-releases/${item.id}`;
  };
  const handleRowClick = (item) => () => {
    trackUsage("willEditReleaseFromHome");
    const link = getEditViewLink(item);
    navigate(link);
  };
  return (0, import_jsx_runtime.jsx)(Table, {
    colCount: 4,
    rowCount: (items == null ? void 0 : items.length) ?? 0,
    children: (0, import_jsx_runtime.jsx)(Tbody, {
      children: items == null ? void 0 : items.map((item) => (0, import_jsx_runtime.jsxs)(Tr, {
        onClick: handleRowClick(item),
        cursor: "pointer",
        children: [
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(CellTypography, {
              title: item.name,
              variant: "omega",
              textColor: "neutral800",
              children: item.name
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(Box, {
              display: "inline-block",
              children: item.status ? (0, import_jsx_runtime.jsx)(Badge, {
                ...getBadgeProps(item.status),
                children: item.status
              }) : (0, import_jsx_runtime.jsx)(Typography, {
                textColor: "neutral600",
                "aria-hidden": true,
                children: "-"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(Typography, {
              variant: "omega",
              textTransform: "capitalize",
              textColor: "neutral600",
              children: item.scheduledAt ? (0, import_jsx_runtime.jsx)(RelativeTime, {
                timestamp: new Date(item.scheduledAt)
              }) : formatMessage({
                id: "content-releases.pages.Releases.not-scheduled",
                defaultMessage: "Not scheduled"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            onClick: (e) => e.stopPropagation(),
            children: (0, import_jsx_runtime.jsx)(Box, {
              display: "inline-block",
              children: (0, import_jsx_runtime.jsx)(IconButton, {
                tag: Link,
                to: getEditViewLink(item),
                onClick: () => trackUsage("willEditReleaseFromHome"),
                label: formatMessage({
                  id: "content-manager.actions.edit.label",
                  defaultMessage: "Edit"
                }),
                variant: "ghost",
                children: (0, import_jsx_runtime.jsx)(ForwardRef$1z, {})
              })
            })
          })
        ]
      }, item.documentId))
    })
  });
};
var UpcomingReleasesWidget = () => {
  const { formatMessage } = useIntl();
  const { data, isLoading, error } = useGetUpcomingReleasesQuery();
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Widget.Loading, {});
  }
  if (error || !data) {
    return (0, import_jsx_runtime.jsx)(Widget.Error, {});
  }
  if (data.length === 0) {
    return (0, import_jsx_runtime.jsx)(Widget.NoData, {
      children: formatMessage({
        id: "content-releases.widget.upcoming-releases.no-data",
        defaultMessage: "No releases"
      })
    });
  }
  return (0, import_jsx_runtime.jsx)(ReleasesTable, {
    items: data
  });
};
export {
  UpcomingReleasesWidget
};
//# sourceMappingURL=Widgets-BVG2KOIY.js.map
